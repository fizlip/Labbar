
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fb52 	bl	200006ac <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#define B_CS1			0x8
#define B_SELECT 		0x4
#define B_RW 			0x2
#define B_RS 			0x1

void delay_250ns( void ){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* ( (unsigned long *) 0xE000E010) = 0x0;
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <delay_250ns+0x2c>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E014) = ( (168/4) -1 );
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <delay_250ns+0x30>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E018) = 0x0;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <delay_250ns+0x34>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	* ( (unsigned char *) 0xE000E010) = 0x5;
20000026:	4b05      	ldr	r3, [pc, #20]	; (2000003c <delay_250ns+0x2c>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while(* ( (unsigned char *) 0xE000E010) & 0x10000 == 0){}
2000002c:	46c0      	nop			; (mov r8, r8)
	* ( (unsigned long *) 0xE000E010) = 0x0;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <delay_250ns+0x2c>)
20000030:	2200      	movs	r2, #0
20000032:	601a      	str	r2, [r3, #0]
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	bd80      	pop	{r7, pc}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	e000e010 	and	lr, r0, r0, lsl r0
20000040:	e000e014 	and	lr, r0, r4, lsl r0
20000044:	e000e018 	and	lr, r0, r8, lsl r0

20000048 <delay_500ns>:

void delay_500ns( void ){
20000048:	b580      	push	{r7, lr}
2000004a:	af00      	add	r7, sp, #0
	* ( (unsigned long *) 0xE000E010) = 0x0;
2000004c:	4b09      	ldr	r3, [pc, #36]	; (20000074 <delay_500ns+0x2c>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E014) = ( (168/2) -1 );
20000052:	4b09      	ldr	r3, [pc, #36]	; (20000078 <delay_500ns+0x30>)
20000054:	2253      	movs	r2, #83	; 0x53
20000056:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E018) = 0x0;
20000058:	4b08      	ldr	r3, [pc, #32]	; (2000007c <delay_500ns+0x34>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
	* ( (unsigned char *) 0xE000E010) = 0x5;
2000005e:	4b05      	ldr	r3, [pc, #20]	; (20000074 <delay_500ns+0x2c>)
20000060:	2205      	movs	r2, #5
20000062:	701a      	strb	r2, [r3, #0]
	while(* ( (unsigned char *) 0xE000E010) & 0x10000 == 0){}
20000064:	46c0      	nop			; (mov r8, r8)
	* ( (unsigned long *) 0xE000E010) = 0x0;
20000066:	4b03      	ldr	r3, [pc, #12]	; (20000074 <delay_500ns+0x2c>)
20000068:	2200      	movs	r2, #0
2000006a:	601a      	str	r2, [r3, #0]
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	e000e010 	and	lr, r0, r0, lsl r0
20000078:	e000e014 	and	lr, r0, r4, lsl r0
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <delay_mikro>:

// Fördröj en mikro sekund
void delay_mikro(unsigned int us){
20000080:	b580      	push	{r7, lr}
20000082:	b084      	sub	sp, #16
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < us; i++){
20000088:	2300      	movs	r3, #0
2000008a:	60fb      	str	r3, [r7, #12]
2000008c:	e00d      	b.n	200000aa <delay_mikro+0x2a>
		for(int j = 0; j < 4; j++){
2000008e:	2300      	movs	r3, #0
20000090:	60bb      	str	r3, [r7, #8]
20000092:	e004      	b.n	2000009e <delay_mikro+0x1e>
			delay_250ns();
20000094:	f7ff ffbc 	bl	20000010 <delay_250ns>
		for(int j = 0; j < 4; j++){
20000098:	68bb      	ldr	r3, [r7, #8]
2000009a:	3301      	adds	r3, #1
2000009c:	60bb      	str	r3, [r7, #8]
2000009e:	68bb      	ldr	r3, [r7, #8]
200000a0:	2b03      	cmp	r3, #3
200000a2:	ddf7      	ble.n	20000094 <delay_mikro+0x14>
	for(int i = 0; i < us; i++){
200000a4:	68fb      	ldr	r3, [r7, #12]
200000a6:	3301      	adds	r3, #1
200000a8:	60fb      	str	r3, [r7, #12]
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	687a      	ldr	r2, [r7, #4]
200000ae:	429a      	cmp	r2, r3
200000b0:	d8ed      	bhi.n	2000008e <delay_mikro+0xe>
		}
	}
}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	46bd      	mov	sp, r7
200000b6:	b004      	add	sp, #16
200000b8:	bd80      	pop	{r7, pc}

200000ba <delay_milli>:

// Fördröj en milli sekund
void delay_milli(unsigned int ms){
200000ba:	b580      	push	{r7, lr}
200000bc:	b084      	sub	sp, #16
200000be:	af00      	add	r7, sp, #0
200000c0:	6078      	str	r0, [r7, #4]
	int i;
	while( ms-- ){
200000c2:	e011      	b.n	200000e8 <delay_milli+0x2e>
		for( i = 0; i < 1000; i++){
200000c4:	2300      	movs	r3, #0
200000c6:	60fb      	str	r3, [r7, #12]
200000c8:	e00a      	b.n	200000e0 <delay_milli+0x26>
			delay_250ns();
200000ca:	f7ff ffa1 	bl	20000010 <delay_250ns>
			delay_250ns();
200000ce:	f7ff ff9f 	bl	20000010 <delay_250ns>
			delay_250ns();
200000d2:	f7ff ff9d 	bl	20000010 <delay_250ns>
			delay_250ns();
200000d6:	f7ff ff9b 	bl	20000010 <delay_250ns>
		for( i = 0; i < 1000; i++){
200000da:	68fb      	ldr	r3, [r7, #12]
200000dc:	3301      	adds	r3, #1
200000de:	60fb      	str	r3, [r7, #12]
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	4a06      	ldr	r2, [pc, #24]	; (200000fc <delay_milli+0x42>)
200000e4:	4293      	cmp	r3, r2
200000e6:	ddf0      	ble.n	200000ca <delay_milli+0x10>
	while( ms-- ){
200000e8:	687b      	ldr	r3, [r7, #4]
200000ea:	1e5a      	subs	r2, r3, #1
200000ec:	607a      	str	r2, [r7, #4]
200000ee:	2b00      	cmp	r3, #0
200000f0:	d1e8      	bne.n	200000c4 <delay_milli+0xa>
		}
	}
}
200000f2:	46c0      	nop			; (mov r8, r8)
200000f4:	46bd      	mov	sp, r7
200000f6:	b004      	add	sp, #16
200000f8:	bd80      	pop	{r7, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	000003e7 	andeq	r0, r0, r7, ror #7

20000100 <graphic_ctrl_bit_set>:

typedef unsigned char uint8_t;
/* Välj grafik-display och ettställ de bitar som är 1 i x */
void graphic_ctrl_bit_set( uint8_t x ){
20000100:	b580      	push	{r7, lr}
20000102:	b084      	sub	sp, #16
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
2000010c:	4a0f      	ldr	r2, [pc, #60]	; (2000014c <graphic_ctrl_bit_set+0x4c>)
2000010e:	200f      	movs	r0, #15
20000110:	183b      	adds	r3, r7, r0
20000112:	7812      	ldrb	r2, [r2, #0]
20000114:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000116:	183b      	adds	r3, r7, r0
20000118:	183a      	adds	r2, r7, r0
2000011a:	7812      	ldrb	r2, [r2, #0]
2000011c:	2104      	movs	r1, #4
2000011e:	438a      	bics	r2, r1
20000120:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x);
20000122:	1dfb      	adds	r3, r7, #7
20000124:	781b      	ldrb	r3, [r3, #0]
20000126:	b25b      	sxtb	r3, r3
20000128:	2204      	movs	r2, #4
2000012a:	4393      	bics	r3, r2
2000012c:	b25a      	sxtb	r2, r3
2000012e:	183b      	adds	r3, r7, r0
20000130:	781b      	ldrb	r3, [r3, #0]
20000132:	b25b      	sxtb	r3, r3
20000134:	4313      	orrs	r3, r2
20000136:	b25a      	sxtb	r2, r3
20000138:	183b      	adds	r3, r7, r0
2000013a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000013c:	4a03      	ldr	r2, [pc, #12]	; (2000014c <graphic_ctrl_bit_set+0x4c>)
2000013e:	183b      	adds	r3, r7, r0
20000140:	781b      	ldrb	r3, [r3, #0]
20000142:	7013      	strb	r3, [r2, #0]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b004      	add	sp, #16
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021014 	andmi	r1, r2, r4, lsl r0

20000150 <graphic_ctrl_bit_clear>:

/* Välj grafisk-diaplay och nollställ de bitar som är 1 i x */
void graphic_ctrl_bit_clear( uint8_t x ){
20000150:	b580      	push	{r7, lr}
20000152:	b084      	sub	sp, #16
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
2000015c:	4a0f      	ldr	r2, [pc, #60]	; (2000019c <graphic_ctrl_bit_clear+0x4c>)
2000015e:	200f      	movs	r0, #15
20000160:	183b      	adds	r3, r7, r0
20000162:	7812      	ldrb	r2, [r2, #0]
20000164:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000166:	183b      	adds	r3, r7, r0
20000168:	183a      	adds	r2, r7, r0
2000016a:	7812      	ldrb	r2, [r2, #0]
2000016c:	2104      	movs	r1, #4
2000016e:	438a      	bics	r2, r1
20000170:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000172:	1dfb      	adds	r3, r7, #7
20000174:	781b      	ldrb	r3, [r3, #0]
20000176:	b25b      	sxtb	r3, r3
20000178:	43db      	mvns	r3, r3
2000017a:	b25b      	sxtb	r3, r3
2000017c:	183a      	adds	r2, r7, r0
2000017e:	7812      	ldrb	r2, [r2, #0]
20000180:	b252      	sxtb	r2, r2
20000182:	4013      	ands	r3, r2
20000184:	b25a      	sxtb	r2, r3
20000186:	183b      	adds	r3, r7, r0
20000188:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000018a:	4a04      	ldr	r2, [pc, #16]	; (2000019c <graphic_ctrl_bit_clear+0x4c>)
2000018c:	183b      	adds	r3, r7, r0
2000018e:	781b      	ldrb	r3, [r3, #0]
20000190:	7013      	strb	r3, [r2, #0]
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b004      	add	sp, #16
20000198:	bd80      	pop	{r7, pc}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	40021014 	andmi	r1, r2, r4, lsl r0

200001a0 <select_controller>:

/* konfigurera CS-signalerna */
void select_controller( uint8_t controller){
200001a0:	b580      	push	{r7, lr}
200001a2:	b082      	sub	sp, #8
200001a4:	af00      	add	r7, sp, #0
200001a6:	0002      	movs	r2, r0
200001a8:	1dfb      	adds	r3, r7, #7
200001aa:	701a      	strb	r2, [r3, #0]
	switch(controller){
200001ac:	1dfb      	adds	r3, r7, #7
200001ae:	781b      	ldrb	r3, [r3, #0]
200001b0:	2b08      	cmp	r3, #8
200001b2:	d00c      	beq.n	200001ce <select_controller+0x2e>
200001b4:	dc02      	bgt.n	200001bc <select_controller+0x1c>
200001b6:	2b00      	cmp	r3, #0
200001b8:	d005      	beq.n	200001c6 <select_controller+0x26>
		case B_CS1|B_CS2:
			graphic_ctrl_bit_set(B_CS1);
			graphic_ctrl_bit_set(B_CS2);
			break;
	}	
}
200001ba:	e01d      	b.n	200001f8 <select_controller+0x58>
	switch(controller){
200001bc:	2b10      	cmp	r3, #16
200001be:	d00d      	beq.n	200001dc <select_controller+0x3c>
200001c0:	2b18      	cmp	r3, #24
200001c2:	d012      	beq.n	200001ea <select_controller+0x4a>
}
200001c4:	e018      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ffc2 	bl	20000150 <graphic_ctrl_bit_clear>
			break;
200001cc:	e014      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_set(B_CS1);
200001ce:	2008      	movs	r0, #8
200001d0:	f7ff ff96 	bl	20000100 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200001d4:	2010      	movs	r0, #16
200001d6:	f7ff ffbb 	bl	20000150 <graphic_ctrl_bit_clear>
			break;
200001da:	e00d      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_clear(B_CS1);
200001dc:	2008      	movs	r0, #8
200001de:	f7ff ffb7 	bl	20000150 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2);
200001e2:	2010      	movs	r0, #16
200001e4:	f7ff ff8c 	bl	20000100 <graphic_ctrl_bit_set>
			break;
200001e8:	e006      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_set(B_CS1);
200001ea:	2008      	movs	r0, #8
200001ec:	f7ff ff88 	bl	20000100 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2);
200001f0:	2010      	movs	r0, #16
200001f2:	f7ff ff85 	bl	20000100 <graphic_ctrl_bit_set>
			break;
200001f6:	46c0      	nop			; (mov r8, r8)
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b002      	add	sp, #8
200001fe:	bd80      	pop	{r7, pc}

20000200 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000200:	b580      	push	{r7, lr}
20000202:	b082      	sub	sp, #8
20000204:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000206:	2040      	movs	r0, #64	; 0x40
20000208:	f7ff ffa2 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000020c:	4b15      	ldr	r3, [pc, #84]	; (20000264 <graphic_wait_ready+0x64>)
2000020e:	4a16      	ldr	r2, [pc, #88]	; (20000268 <graphic_wait_ready+0x68>)
20000210:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS); graphic_ctrl_bit_set(B_RW);
20000212:	2001      	movs	r0, #1
20000214:	f7ff ff9c 	bl	20000150 <graphic_ctrl_bit_clear>
20000218:	2002      	movs	r0, #2
2000021a:	f7ff ff71 	bl	20000100 <graphic_ctrl_bit_set>
	delay_500ns();
2000021e:	f7ff ff13 	bl	20000048 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
20000222:	2040      	movs	r0, #64	; 0x40
20000224:	f7ff ff6c 	bl	20000100 <graphic_ctrl_bit_set>
		delay_500ns();
20000228:	f7ff ff0e 	bl	20000048 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY;
2000022c:	4b0f      	ldr	r3, [pc, #60]	; (2000026c <graphic_wait_ready+0x6c>)
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	b2da      	uxtb	r2, r3
20000232:	1dfb      	adds	r3, r7, #7
20000234:	217f      	movs	r1, #127	; 0x7f
20000236:	438a      	bics	r2, r1
20000238:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000023a:	2040      	movs	r0, #64	; 0x40
2000023c:	f7ff ff88 	bl	20000150 <graphic_ctrl_bit_clear>
		delay_500ns();
20000240:	f7ff ff02 	bl	20000048 <delay_500ns>
		if(c == 0){break;} 
20000244:	1dfb      	adds	r3, r7, #7
20000246:	781b      	ldrb	r3, [r3, #0]
20000248:	2b00      	cmp	r3, #0
2000024a:	d000      	beq.n	2000024e <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000024c:	e7e9      	b.n	20000222 <graphic_wait_ready+0x22>
		if(c == 0){break;} 
2000024e:	46c0      	nop			; (mov r8, r8)
	}
	graphic_ctrl_bit_set(B_E);
20000250:	2040      	movs	r0, #64	; 0x40
20000252:	f7ff ff55 	bl	20000100 <graphic_ctrl_bit_set>
	*portModer = 0x55555555;
20000256:	4b03      	ldr	r3, [pc, #12]	; (20000264 <graphic_wait_ready+0x64>)
20000258:	4a05      	ldr	r2, [pc, #20]	; (20000270 <graphic_wait_ready+0x70>)
2000025a:	601a      	str	r2, [r3, #0]
}
2000025c:	46c0      	nop			; (mov r8, r8)
2000025e:	46bd      	mov	sp, r7
20000260:	b002      	add	sp, #8
20000262:	bd80      	pop	{r7, pc}
20000264:	40021000 	andmi	r1, r2, r0
20000268:	00005555 	andeq	r5, r0, r5, asr r5
2000026c:	40021011 	andmi	r1, r2, r1, lsl r0
20000270:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000274 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000274:	b580      	push	{r7, lr}
20000276:	b084      	sub	sp, #16
20000278:	af00      	add	r7, sp, #0
2000027a:	0002      	movs	r2, r0
2000027c:	1dfb      	adds	r3, r7, #7
2000027e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000280:	2040      	movs	r0, #64	; 0x40
20000282:	f7ff ff65 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000286:	4b1c      	ldr	r3, [pc, #112]	; (200002f8 <graphic_read+0x84>)
20000288:	4a1c      	ldr	r2, [pc, #112]	; (200002fc <graphic_read+0x88>)
2000028a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
2000028c:	2003      	movs	r0, #3
2000028e:	f7ff ff37 	bl	20000100 <graphic_ctrl_bit_set>
	select_controller(controller);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff82 	bl	200001a0 <select_controller>
	delay_500ns();
2000029c:	f7ff fed4 	bl	20000048 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002a0:	2040      	movs	r0, #64	; 0x40
200002a2:	f7ff ff2d 	bl	20000100 <graphic_ctrl_bit_set>
	delay_500ns();
200002a6:	f7ff fecf 	bl	20000048 <delay_500ns>
	c = *portIdrHigh;
200002aa:	4a15      	ldr	r2, [pc, #84]	; (20000300 <graphic_read+0x8c>)
200002ac:	230f      	movs	r3, #15
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	7812      	ldrb	r2, [r2, #0]
200002b2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ff4b 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
200002ba:	4b0f      	ldr	r3, [pc, #60]	; (200002f8 <graphic_read+0x84>)
200002bc:	4a11      	ldr	r2, [pc, #68]	; (20000304 <graphic_read+0x90>)
200002be:	601a      	str	r2, [r3, #0]
	if(controller & B_CS1){
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	781b      	ldrb	r3, [r3, #0]
200002c4:	2208      	movs	r2, #8
200002c6:	4013      	ands	r3, r2
200002c8:	d004      	beq.n	200002d4 <graphic_read+0x60>
		select_controller(B_CS1);
200002ca:	2008      	movs	r0, #8
200002cc:	f7ff ff68 	bl	200001a0 <select_controller>
		graphic_wait_ready();
200002d0:	f7ff ff96 	bl	20000200 <graphic_wait_ready>
	}
	// Får man samma resultat med "==" ist för &?
	if(controller & B_CS2){
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	2210      	movs	r2, #16
200002da:	4013      	ands	r3, r2
200002dc:	d004      	beq.n	200002e8 <graphic_read+0x74>
		select_controller(B_CS2);
200002de:	2010      	movs	r0, #16
200002e0:	f7ff ff5e 	bl	200001a0 <select_controller>
		graphic_wait_ready();
200002e4:	f7ff ff8c 	bl	20000200 <graphic_wait_ready>
	}
	return c;
200002e8:	230f      	movs	r3, #15
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	781b      	ldrb	r3, [r3, #0]
}
200002ee:	0018      	movs	r0, r3
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)
200002f8:	40021000 	andmi	r1, r2, r0
200002fc:	00005555 	andeq	r5, r0, r5, asr r5
20000300:	40021011 	andmi	r1, r2, r1, lsl r0
20000304:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000308 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	0002      	movs	r2, r0
20000310:	1dfb      	adds	r3, r7, #7
20000312:	701a      	strb	r2, [r3, #0]
20000314:	1dbb      	adds	r3, r7, #6
20000316:	1c0a      	adds	r2, r1, #0
20000318:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value;
2000031a:	4a19      	ldr	r2, [pc, #100]	; (20000380 <graphic_write+0x78>)
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000322:	1dbb      	adds	r3, r7, #6
20000324:	781b      	ldrb	r3, [r3, #0]
20000326:	0018      	movs	r0, r3
20000328:	f7ff ff3a 	bl	200001a0 <select_controller>
	delay_500ns();
2000032c:	f7ff fe8c 	bl	20000048 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff fee5 	bl	20000100 <graphic_ctrl_bit_set>
	delay_500ns();
20000336:	f7ff fe87 	bl	20000048 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff ff08 	bl	20000150 <graphic_ctrl_bit_clear>
	
	if(controller && B_CS1){
20000340:	1dbb      	adds	r3, r7, #6
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	2b00      	cmp	r3, #0
20000346:	d004      	beq.n	20000352 <graphic_write+0x4a>
		select_controller(B_CS1);
20000348:	2008      	movs	r0, #8
2000034a:	f7ff ff29 	bl	200001a0 <select_controller>
		graphic_wait_ready();
2000034e:	f7ff ff57 	bl	20000200 <graphic_wait_ready>
	}
	if(controller && B_CS2){
20000352:	1dbb      	adds	r3, r7, #6
20000354:	781b      	ldrb	r3, [r3, #0]
20000356:	2b00      	cmp	r3, #0
20000358:	d004      	beq.n	20000364 <graphic_write+0x5c>
		select_controller(B_CS2);
2000035a:	2010      	movs	r0, #16
2000035c:	f7ff ff20 	bl	200001a0 <select_controller>
		graphic_wait_ready();
20000360:	f7ff ff4e 	bl	20000200 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000364:	4b06      	ldr	r3, [pc, #24]	; (20000380 <graphic_write+0x78>)
20000366:	2200      	movs	r2, #0
20000368:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000036a:	2040      	movs	r0, #64	; 0x40
2000036c:	f7ff fec8 	bl	20000100 <graphic_ctrl_bit_set>
	select_controller(0);
20000370:	2000      	movs	r0, #0
20000372:	f7ff ff15 	bl	200001a0 <select_controller>
	
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b002      	add	sp, #8
2000037c:	bd80      	pop	{r7, pc}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	40021015 	andmi	r1, r2, r5, lsl r0

20000384 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000384:	b580      	push	{r7, lr}
20000386:	b082      	sub	sp, #8
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
20000390:	1dbb      	adds	r3, r7, #6
20000392:	1c0a      	adds	r2, r1, #0
20000394:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000396:	2040      	movs	r0, #64	; 0x40
20000398:	f7ff feda 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000039c:	1dbb      	adds	r3, r7, #6
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	0018      	movs	r0, r3
200003a2:	f7ff fefd 	bl	200001a0 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200003a6:	2001      	movs	r0, #1
200003a8:	f7ff fed2 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200003ac:	2002      	movs	r0, #2
200003ae:	f7ff fecf 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200003b2:	1dbb      	adds	r3, r7, #6
200003b4:	781a      	ldrb	r2, [r3, #0]
200003b6:	1dfb      	adds	r3, r7, #7
200003b8:	781b      	ldrb	r3, [r3, #0]
200003ba:	0011      	movs	r1, r2
200003bc:	0018      	movs	r0, r3
200003be:	f7ff ffa3 	bl	20000308 <graphic_write>
}
200003c2:	46c0      	nop			; (mov r8, r8)
200003c4:	46bd      	mov	sp, r7
200003c6:	b002      	add	sp, #8
200003c8:	bd80      	pop	{r7, pc}

200003ca <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200003ca:	b580      	push	{r7, lr}
200003cc:	b082      	sub	sp, #8
200003ce:	af00      	add	r7, sp, #0
200003d0:	0002      	movs	r2, r0
200003d2:	1dfb      	adds	r3, r7, #7
200003d4:	701a      	strb	r2, [r3, #0]
200003d6:	1dbb      	adds	r3, r7, #6
200003d8:	1c0a      	adds	r2, r1, #0
200003da:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff feb7 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003e2:	1dbb      	adds	r3, r7, #6
200003e4:	781b      	ldrb	r3, [r3, #0]
200003e6:	0018      	movs	r0, r3
200003e8:	f7ff feda 	bl	200001a0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003ec:	2001      	movs	r0, #1
200003ee:	f7ff fe87 	bl	20000100 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003f2:	2002      	movs	r0, #2
200003f4:	f7ff feac 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003f8:	1dbb      	adds	r3, r7, #6
200003fa:	781a      	ldrb	r2, [r3, #0]
200003fc:	1dfb      	adds	r3, r7, #7
200003fe:	781b      	ldrb	r3, [r3, #0]
20000400:	0011      	movs	r1, r2
20000402:	0018      	movs	r0, r3
20000404:	f7ff ff80 	bl	20000308 <graphic_write>
}
20000408:	46c0      	nop			; (mov r8, r8)
2000040a:	46bd      	mov	sp, r7
2000040c:	b002      	add	sp, #8
2000040e:	bd80      	pop	{r7, pc}

20000410 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000410:	b580      	push	{r7, lr}
20000412:	b082      	sub	sp, #8
20000414:	af00      	add	r7, sp, #0
20000416:	0002      	movs	r2, r0
20000418:	1dfb      	adds	r3, r7, #7
2000041a:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000041c:	1dfb      	adds	r3, r7, #7
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	0018      	movs	r0, r3
20000422:	f7ff ff27 	bl	20000274 <graphic_read>
	return graphic_read(controller);
20000426:	1dfb      	adds	r3, r7, #7
20000428:	781b      	ldrb	r3, [r3, #0]
2000042a:	0018      	movs	r0, r3
2000042c:	f7ff ff22 	bl	20000274 <graphic_read>
20000430:	0003      	movs	r3, r0
}
20000432:	0018      	movs	r0, r3
20000434:	46bd      	mov	sp, r7
20000436:	b002      	add	sp, #8
20000438:	bd80      	pop	{r7, pc}

2000043a <init_app>:

void init_app(){
2000043a:	b580      	push	{r7, lr}
2000043c:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
2000043e:	4b03      	ldr	r3, [pc, #12]	; (2000044c <init_app+0x12>)
20000440:	4a03      	ldr	r2, [pc, #12]	; (20000450 <init_app+0x16>)
20000442:	601a      	str	r2, [r3, #0]
}
20000444:	46c0      	nop			; (mov r8, r8)
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40021000 	andmi	r1, r2, r0
20000450:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000454 <graphic_initialize>:

void graphic_initialize(void){
20000454:	b580      	push	{r7, lr}
20000456:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000458:	2040      	movs	r0, #64	; 0x40
2000045a:	f7ff fe51 	bl	20000100 <graphic_ctrl_bit_set>
	delay_mikro(10);
2000045e:	200a      	movs	r0, #10
20000460:	f7ff fe0e 	bl	20000080 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1);
20000464:	2008      	movs	r0, #8
20000466:	f7ff fe73 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000046a:	2010      	movs	r0, #16
2000046c:	f7ff fe70 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000470:	2020      	movs	r0, #32
20000472:	f7ff fe6d 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20000476:	2040      	movs	r0, #64	; 0x40
20000478:	f7ff fe6a 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000047c:	201e      	movs	r0, #30
2000047e:	f7ff fe1c 	bl	200000ba <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000482:	2020      	movs	r0, #32
20000484:	f7ff fe3c 	bl	20000100 <graphic_ctrl_bit_set>
	delay_milli(100);
20000488:	2064      	movs	r0, #100	; 0x64
2000048a:	f7ff fe16 	bl	200000ba <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000048e:	2118      	movs	r1, #24
20000490:	203e      	movs	r0, #62	; 0x3e
20000492:	f7ff ff77 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000496:	2118      	movs	r1, #24
20000498:	203f      	movs	r0, #63	; 0x3f
2000049a:	f7ff ff73 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000049e:	2118      	movs	r1, #24
200004a0:	20c0      	movs	r0, #192	; 0xc0
200004a2:	f7ff ff6f 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200004a6:	2118      	movs	r1, #24
200004a8:	2040      	movs	r0, #64	; 0x40
200004aa:	f7ff ff6b 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200004ae:	2118      	movs	r1, #24
200004b0:	20b8      	movs	r0, #184	; 0xb8
200004b2:	f7ff ff67 	bl	20000384 <graphic_write_command>
	select_controller(0);
200004b6:	2000      	movs	r0, #0
200004b8:	f7ff fe72 	bl	200001a0 <select_controller>
}
200004bc:	46c0      	nop			; (mov r8, r8)
200004be:	46bd      	mov	sp, r7
200004c0:	bd80      	pop	{r7, pc}

200004c2 <graphic_clear_screen>:

void graphic_clear_screen( void ){
200004c2:	b580      	push	{r7, lr}
200004c4:	b082      	sub	sp, #8
200004c6:	af00      	add	r7, sp, #0
	for(int page = 0; page < 8; page++){
200004c8:	2300      	movs	r3, #0
200004ca:	607b      	str	r3, [r7, #4]
200004cc:	e01e      	b.n	2000050c <graphic_clear_screen+0x4a>
		graphic_write(LCD_SET_PAGE | page, B_CS1|B_CS2);
200004ce:	687b      	ldr	r3, [r7, #4]
200004d0:	b25b      	sxtb	r3, r3
200004d2:	2248      	movs	r2, #72	; 0x48
200004d4:	4252      	negs	r2, r2
200004d6:	4313      	orrs	r3, r2
200004d8:	b25b      	sxtb	r3, r3
200004da:	b2db      	uxtb	r3, r3
200004dc:	2118      	movs	r1, #24
200004de:	0018      	movs	r0, r3
200004e0:	f7ff ff12 	bl	20000308 <graphic_write>
		graphic_write(LCD_SET_ADD | 0, B_CS1|B_CS2);
200004e4:	2118      	movs	r1, #24
200004e6:	2040      	movs	r0, #64	; 0x40
200004e8:	f7ff ff0e 	bl	20000308 <graphic_write>
		for(int add = 0; add < 64; add++){
200004ec:	2300      	movs	r3, #0
200004ee:	603b      	str	r3, [r7, #0]
200004f0:	e006      	b.n	20000500 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1|B_CS2);
200004f2:	2118      	movs	r1, #24
200004f4:	2000      	movs	r0, #0
200004f6:	f7ff ff68 	bl	200003ca <graphic_write_data>
		for(int add = 0; add < 64; add++){
200004fa:	683b      	ldr	r3, [r7, #0]
200004fc:	3301      	adds	r3, #1
200004fe:	603b      	str	r3, [r7, #0]
20000500:	683b      	ldr	r3, [r7, #0]
20000502:	2b3f      	cmp	r3, #63	; 0x3f
20000504:	ddf5      	ble.n	200004f2 <graphic_clear_screen+0x30>
	for(int page = 0; page < 8; page++){
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	3301      	adds	r3, #1
2000050a:	607b      	str	r3, [r7, #4]
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	2b07      	cmp	r3, #7
20000510:	dddd      	ble.n	200004ce <graphic_clear_screen+0xc>
		}
	}
}
20000512:	46c0      	nop			; (mov r8, r8)
20000514:	46bd      	mov	sp, r7
20000516:	b002      	add	sp, #8
20000518:	bd80      	pop	{r7, pc}

2000051a <pixel>:

void pixel(int x, int y, int set){
2000051a:	b5b0      	push	{r4, r5, r7, lr}
2000051c:	b088      	sub	sp, #32
2000051e:	af00      	add	r7, sp, #0
20000520:	60f8      	str	r0, [r7, #12]
20000522:	60b9      	str	r1, [r7, #8]
20000524:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if( (x < 1) || (x > 128) || (y < 1) || (y > 64)){
20000526:	68fb      	ldr	r3, [r7, #12]
20000528:	2b00      	cmp	r3, #0
2000052a:	dc00      	bgt.n	2000052e <pixel+0x14>
2000052c:	e0b6      	b.n	2000069c <pixel+0x182>
2000052e:	68fb      	ldr	r3, [r7, #12]
20000530:	2b80      	cmp	r3, #128	; 0x80
20000532:	dd00      	ble.n	20000536 <pixel+0x1c>
20000534:	e0b2      	b.n	2000069c <pixel+0x182>
20000536:	68bb      	ldr	r3, [r7, #8]
20000538:	2b00      	cmp	r3, #0
2000053a:	dc00      	bgt.n	2000053e <pixel+0x24>
2000053c:	e0ae      	b.n	2000069c <pixel+0x182>
2000053e:	68bb      	ldr	r3, [r7, #8]
20000540:	2b40      	cmp	r3, #64	; 0x40
20000542:	dd00      	ble.n	20000546 <pixel+0x2c>
20000544:	e0aa      	b.n	2000069c <pixel+0x182>
		return;
	}
	index = (y-1) / 8;
20000546:	68bb      	ldr	r3, [r7, #8]
20000548:	3b01      	subs	r3, #1
2000054a:	2b00      	cmp	r3, #0
2000054c:	da00      	bge.n	20000550 <pixel+0x36>
2000054e:	3307      	adds	r3, #7
20000550:	10db      	asrs	r3, r3, #3
20000552:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
20000554:	68bb      	ldr	r3, [r7, #8]
20000556:	3b01      	subs	r3, #1
20000558:	4a52      	ldr	r2, [pc, #328]	; (200006a4 <pixel+0x18a>)
2000055a:	4013      	ands	r3, r2
2000055c:	d504      	bpl.n	20000568 <pixel+0x4e>
2000055e:	3b01      	subs	r3, #1
20000560:	2208      	movs	r2, #8
20000562:	4252      	negs	r2, r2
20000564:	4313      	orrs	r3, r2
20000566:	3301      	adds	r3, #1
20000568:	2b07      	cmp	r3, #7
2000056a:	d82c      	bhi.n	200005c6 <pixel+0xac>
2000056c:	009a      	lsls	r2, r3, #2
2000056e:	4b4e      	ldr	r3, [pc, #312]	; (200006a8 <pixel+0x18e>)
20000570:	18d3      	adds	r3, r2, r3
20000572:	681b      	ldr	r3, [r3, #0]
20000574:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000576:	231f      	movs	r3, #31
20000578:	18fb      	adds	r3, r7, r3
2000057a:	2201      	movs	r2, #1
2000057c:	701a      	strb	r2, [r3, #0]
2000057e:	e022      	b.n	200005c6 <pixel+0xac>
		case 1: mask = 2; break; 
20000580:	231f      	movs	r3, #31
20000582:	18fb      	adds	r3, r7, r3
20000584:	2202      	movs	r2, #2
20000586:	701a      	strb	r2, [r3, #0]
20000588:	e01d      	b.n	200005c6 <pixel+0xac>
		case 2: mask = 4; break; 
2000058a:	231f      	movs	r3, #31
2000058c:	18fb      	adds	r3, r7, r3
2000058e:	2204      	movs	r2, #4
20000590:	701a      	strb	r2, [r3, #0]
20000592:	e018      	b.n	200005c6 <pixel+0xac>
		case 3: mask = 8; break; 
20000594:	231f      	movs	r3, #31
20000596:	18fb      	adds	r3, r7, r3
20000598:	2208      	movs	r2, #8
2000059a:	701a      	strb	r2, [r3, #0]
2000059c:	e013      	b.n	200005c6 <pixel+0xac>
		case 4: mask = 0x10; break; 
2000059e:	231f      	movs	r3, #31
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	2210      	movs	r2, #16
200005a4:	701a      	strb	r2, [r3, #0]
200005a6:	e00e      	b.n	200005c6 <pixel+0xac>
		case 5: mask = 0x20; break; 
200005a8:	231f      	movs	r3, #31
200005aa:	18fb      	adds	r3, r7, r3
200005ac:	2220      	movs	r2, #32
200005ae:	701a      	strb	r2, [r3, #0]
200005b0:	e009      	b.n	200005c6 <pixel+0xac>
		case 6: mask = 0x40; break; 
200005b2:	231f      	movs	r3, #31
200005b4:	18fb      	adds	r3, r7, r3
200005b6:	2240      	movs	r2, #64	; 0x40
200005b8:	701a      	strb	r2, [r3, #0]
200005ba:	e004      	b.n	200005c6 <pixel+0xac>
		case 7: mask = 0x80; break; 
200005bc:	231f      	movs	r3, #31
200005be:	18fb      	adds	r3, r7, r3
200005c0:	2280      	movs	r2, #128	; 0x80
200005c2:	701a      	strb	r2, [r3, #0]
200005c4:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	2b00      	cmp	r3, #0
200005ca:	d105      	bne.n	200005d8 <pixel+0xbe>
		mask = ~mask;
200005cc:	221f      	movs	r2, #31
200005ce:	18bb      	adds	r3, r7, r2
200005d0:	18ba      	adds	r2, r7, r2
200005d2:	7812      	ldrb	r2, [r2, #0]
200005d4:	43d2      	mvns	r2, r2
200005d6:	701a      	strb	r2, [r3, #0]
	}
	if(x > 64){
200005d8:	68fb      	ldr	r3, [r7, #12]
200005da:	2b40      	cmp	r3, #64	; 0x40
200005dc:	dd07      	ble.n	200005ee <pixel+0xd4>
		controller = B_CS2;
200005de:	231e      	movs	r3, #30
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	2210      	movs	r2, #16
200005e4:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200005e6:	68fb      	ldr	r3, [r7, #12]
200005e8:	3b41      	subs	r3, #65	; 0x41
200005ea:	60fb      	str	r3, [r7, #12]
200005ec:	e006      	b.n	200005fc <pixel+0xe2>
	}
	else{
		controller = B_CS1;
200005ee:	231e      	movs	r3, #30
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	2208      	movs	r2, #8
200005f4:	701a      	strb	r2, [r3, #0]
		x = x - 1;
200005f6:	68fb      	ldr	r3, [r7, #12]
200005f8:	3b01      	subs	r3, #1
200005fa:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
200005fc:	68fb      	ldr	r3, [r7, #12]
200005fe:	b25b      	sxtb	r3, r3
20000600:	2240      	movs	r2, #64	; 0x40
20000602:	4313      	orrs	r3, r2
20000604:	b25b      	sxtb	r3, r3
20000606:	b2da      	uxtb	r2, r3
20000608:	251e      	movs	r5, #30
2000060a:	197b      	adds	r3, r7, r5
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0019      	movs	r1, r3
20000610:	0010      	movs	r0, r2
20000612:	f7ff feb7 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000616:	69bb      	ldr	r3, [r7, #24]
20000618:	b25b      	sxtb	r3, r3
2000061a:	2248      	movs	r2, #72	; 0x48
2000061c:	4252      	negs	r2, r2
2000061e:	4313      	orrs	r3, r2
20000620:	b25b      	sxtb	r3, r3
20000622:	b2da      	uxtb	r2, r3
20000624:	197b      	adds	r3, r7, r5
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	0019      	movs	r1, r3
2000062a:	0010      	movs	r0, r2
2000062c:	f7ff feaa 	bl	20000384 <graphic_write_command>
	c = graphic_read_data(controller);
20000630:	2317      	movs	r3, #23
20000632:	18fc      	adds	r4, r7, r3
20000634:	197b      	adds	r3, r7, r5
20000636:	781b      	ldrb	r3, [r3, #0]
20000638:	0018      	movs	r0, r3
2000063a:	f7ff fee9 	bl	20000410 <graphic_read_data>
2000063e:	0003      	movs	r3, r0
20000640:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000642:	68fb      	ldr	r3, [r7, #12]
20000644:	b25b      	sxtb	r3, r3
20000646:	2240      	movs	r2, #64	; 0x40
20000648:	4313      	orrs	r3, r2
2000064a:	b25b      	sxtb	r3, r3
2000064c:	b2da      	uxtb	r2, r3
2000064e:	197b      	adds	r3, r7, r5
20000650:	781b      	ldrb	r3, [r3, #0]
20000652:	0019      	movs	r1, r3
20000654:	0010      	movs	r0, r2
20000656:	f7ff fe95 	bl	20000384 <graphic_write_command>
	if(set){
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	2b00      	cmp	r3, #0
2000065e:	d009      	beq.n	20000674 <pixel+0x15a>
		mask = mask | c;
20000660:	221f      	movs	r2, #31
20000662:	18bb      	adds	r3, r7, r2
20000664:	18b9      	adds	r1, r7, r2
20000666:	2217      	movs	r2, #23
20000668:	18ba      	adds	r2, r7, r2
2000066a:	7809      	ldrb	r1, [r1, #0]
2000066c:	7812      	ldrb	r2, [r2, #0]
2000066e:	430a      	orrs	r2, r1
20000670:	701a      	strb	r2, [r3, #0]
20000672:	e008      	b.n	20000686 <pixel+0x16c>
	}
	else{
		mask = mask & c;
20000674:	221f      	movs	r2, #31
20000676:	18bb      	adds	r3, r7, r2
20000678:	18ba      	adds	r2, r7, r2
2000067a:	2117      	movs	r1, #23
2000067c:	1879      	adds	r1, r7, r1
2000067e:	7812      	ldrb	r2, [r2, #0]
20000680:	7809      	ldrb	r1, [r1, #0]
20000682:	400a      	ands	r2, r1
20000684:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000686:	231e      	movs	r3, #30
20000688:	18fb      	adds	r3, r7, r3
2000068a:	781a      	ldrb	r2, [r3, #0]
2000068c:	231f      	movs	r3, #31
2000068e:	18fb      	adds	r3, r7, r3
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	0011      	movs	r1, r2
20000694:	0018      	movs	r0, r3
20000696:	f7ff fe98 	bl	200003ca <graphic_write_data>
2000069a:	e000      	b.n	2000069e <pixel+0x184>
		return;
2000069c:	46c0      	nop			; (mov r8, r8)
}
2000069e:	46bd      	mov	sp, r7
200006a0:	b008      	add	sp, #32
200006a2:	bdb0      	pop	{r4, r5, r7, pc}
200006a4:	80000007 	andhi	r0, r0, r7
200006a8:	2000073c 	andcs	r0, r0, ip, lsr r7

200006ac <main>:

void main(void)
{
200006ac:	b580      	push	{r7, lr}
200006ae:	b082      	sub	sp, #8
200006b0:	af00      	add	r7, sp, #0
	unsigned i;
	init_app();
200006b2:	f7ff fec2 	bl	2000043a <init_app>
	//graphic_initialize();
#ifdef SIMULATOR
	graphic_clear_screen();
#endif
	for( i = 0; i < 128; i++){
200006b6:	2300      	movs	r3, #0
200006b8:	607b      	str	r3, [r7, #4]
200006ba:	e008      	b.n	200006ce <main+0x22>
		pixel(i, 10, 1);
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	2201      	movs	r2, #1
200006c0:	210a      	movs	r1, #10
200006c2:	0018      	movs	r0, r3
200006c4:	f7ff ff29 	bl	2000051a <pixel>
	for( i = 0; i < 128; i++){
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	3301      	adds	r3, #1
200006cc:	607b      	str	r3, [r7, #4]
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	2b7f      	cmp	r3, #127	; 0x7f
200006d2:	d9f3      	bls.n	200006bc <main+0x10>
	}
	for( i = 0; i < 64; i++){
200006d4:	2300      	movs	r3, #0
200006d6:	607b      	str	r3, [r7, #4]
200006d8:	e008      	b.n	200006ec <main+0x40>
		pixel(10, i, 1);
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	2201      	movs	r2, #1
200006de:	0019      	movs	r1, r3
200006e0:	200a      	movs	r0, #10
200006e2:	f7ff ff1a 	bl	2000051a <pixel>
	for( i = 0; i < 64; i++){
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	3301      	adds	r3, #1
200006ea:	607b      	str	r3, [r7, #4]
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	2b3f      	cmp	r3, #63	; 0x3f
200006f0:	d9f3      	bls.n	200006da <main+0x2e>
	}
	delay_milli( 5 );
200006f2:	2005      	movs	r0, #5
200006f4:	f7ff fce1 	bl	200000ba <delay_milli>
	for( i = 0; i < 128; i++){
200006f8:	2300      	movs	r3, #0
200006fa:	607b      	str	r3, [r7, #4]
200006fc:	e008      	b.n	20000710 <main+0x64>
		pixel(i, 10, 0);
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	2200      	movs	r2, #0
20000702:	210a      	movs	r1, #10
20000704:	0018      	movs	r0, r3
20000706:	f7ff ff08 	bl	2000051a <pixel>
	for( i = 0; i < 128; i++){
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	3301      	adds	r3, #1
2000070e:	607b      	str	r3, [r7, #4]
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	2b7f      	cmp	r3, #127	; 0x7f
20000714:	d9f3      	bls.n	200006fe <main+0x52>
	}
	for( i = 0; i < 64; i++){
20000716:	2300      	movs	r3, #0
20000718:	607b      	str	r3, [r7, #4]
2000071a:	e008      	b.n	2000072e <main+0x82>
		pixel(10, i, 0);
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	2200      	movs	r2, #0
20000720:	0019      	movs	r1, r3
20000722:	200a      	movs	r0, #10
20000724:	f7ff fef9 	bl	2000051a <pixel>
	for( i = 0; i < 64; i++){
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	3301      	adds	r3, #1
2000072c:	607b      	str	r3, [r7, #4]
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	2b3f      	cmp	r3, #63	; 0x3f
20000732:	d9f3      	bls.n	2000071c <main+0x70>
	}

}
20000734:	46c0      	nop			; (mov r8, r8)
20000736:	46bd      	mov	sp, r7
20000738:	b002      	add	sp, #8
2000073a:	bd80      	pop	{r7, pc}
2000073c:	20000576 	andcs	r0, r0, r6, ror r5
20000740:	20000580 	andcs	r0, r0, r0, lsl #11
20000744:	2000058a 	andcs	r0, r0, sl, lsl #11
20000748:	20000594 	mulcs	r0, r4, r5
2000074c:	2000059e 	mulcs	r0, lr, r5
20000750:	200005a8 	andcs	r0, r0, r8, lsr #11
20000754:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
20000758:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000385 	andeq	r0, r0, r5, lsl #7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	0000c70c 	andeq	ip, r0, ip, lsl #14
  14:	0001df00 	andeq	sp, r1, r0, lsl #30
	...
  24:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
  28:	52010000 	andpl	r0, r1, #0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	a9080103 	stmdbge	r8, {r0, r1, r8}
  34:	04000001 	streq	r0, [r0], #-1
  38:	000001cc 	andeq	r0, r0, ip, asr #3
  3c:	ac011a01 			; <UNDEFINED> instruction: 0xac011a01
  40:	90200006 	eorls	r0, r0, r6
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	00005b9c 	muleq	r0, ip, fp
  4c:	00690500 	rsbeq	r0, r9, r0, lsl #10
  50:	5b011c01 	blpl	4705c <startup-0x1ffb8fa4>
  54:	02000000 	andeq	r0, r0, #0
  58:	03007491 	movweq	r7, #1169	; 0x491
  5c:	00980704 	addseq	r0, r8, r4, lsl #14
  60:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
  64:	01000001 	tsteq	r0, r1
  68:	00051aef 	andeq	r1, r5, pc, ror #21
  6c:	00019220 	andeq	r9, r1, r0, lsr #4
  70:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
  74:	07000000 	streq	r0, [r0, -r0]
  78:	ef010078 	svc	0x00010078
  7c:	000000d4 	ldrdeq	r0, [r0], -r4
  80:	075c9102 	ldrbeq	r9, [ip, -r2, lsl #2]
  84:	ef010079 	svc	0x00010079
  88:	000000d4 	ldrdeq	r0, [r0], -r4
  8c:	07589102 	ldrbeq	r9, [r8, -r2, lsl #2]
  90:	00746573 	rsbseq	r6, r4, r3, ror r5
  94:	00d4ef01 	sbcseq	lr, r4, r1, lsl #30
  98:	91020000 	mrsls	r0, (UNDEF: 2)
  9c:	019c0854 	orrseq	r0, ip, r4, asr r8
  a0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
  a4:	00000025 	andeq	r0, r0, r5, lsr #32
  a8:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
  ac:	f0010063 			; <UNDEFINED> instruction: 0xf0010063
  b0:	00000025 	andeq	r0, r0, r5, lsr #32
  b4:	08679102 	stmdaeq	r7!, {r1, r8, ip, pc}^
  b8:	00000142 	andeq	r0, r0, r2, asr #2
  bc:	0025f001 	eoreq	pc, r5, r1
  c0:	91020000 	mrsls	r0, (UNDEF: 2)
  c4:	021f086e 	andseq	r0, pc, #7208960	; 0x6e0000
  c8:	f1010000 	setend	le
  cc:	000000d4 	ldrdeq	r0, [r0], -r4
  d0:	00689102 	rsbeq	r9, r8, r2, lsl #2
  d4:	6905040a 	stmdbvs	r5, {r1, r3, sl}
  d8:	0600746e 	streq	r7, [r0], -lr, ror #8
  dc:	00000242 	andeq	r0, r0, r2, asr #4
  e0:	04c2e501 	strbeq	lr, [r2], #1281	; 0x501
  e4:	00582000 	subseq	r2, r8, r0
  e8:	9c010000 	stcls	0, cr0, [r1], {-0}
  ec:	00000121 	andeq	r0, r0, r1, lsr #2
  f0:	0004c80b 	andeq	ip, r4, fp, lsl #16
  f4:	00004a20 	andeq	r4, r0, r0, lsr #20
  f8:	02370800 	eorseq	r0, r7, #0, 16
  fc:	e6010000 	str	r0, [r1], -r0
 100:	000000d4 	ldrdeq	r0, [r0], -r4
 104:	0b749102 	bleq	1d24514 <startup-0x1e2dbaec>
 108:	200004ec 	andcs	r0, r0, ip, ror #9
 10c:	0000001a 	andeq	r0, r0, sl, lsl r0
 110:	64646109 	strbtvs	r6, [r4], #-265	; 0xfffffef7
 114:	d4e90100 	strbtle	r0, [r9], #256	; 0x100
 118:	02000000 	andeq	r0, r0, #0
 11c:	00007091 	muleq	r0, r1, r0
 120:	02630c00 	rsbeq	r0, r3, #0, 24
 124:	d3010000 	movwle	r0, #4096	; 0x1000
 128:	20000454 	andcs	r0, r0, r4, asr r4
 12c:	0000006e 	andeq	r0, r0, lr, rrx
 130:	8b0d9c01 	blhi	36713c <startup-0x1fc98ec4>
 134:	01000001 	tsteq	r0, r1
 138:	00043acf 	andeq	r3, r4, pc, asr #21
 13c:	00001a20 	andeq	r1, r0, r0, lsr #20
 140:	0e9c0100 	fmleqe	f0, f4, f0
 144:	00000225 	andeq	r0, r0, r5, lsr #4
 148:	0025ca01 	eoreq	ip, r5, r1, lsl #20
 14c:	04100000 	ldreq	r0, [r0], #-0
 150:	002a2000 	eoreq	r2, sl, r0
 154:	9c010000 	stcls	0, cr0, [r1], {-0}
 158:	0000016b 	andeq	r0, r0, fp, ror #2
 15c:	0001420f 	andeq	r4, r1, pc, lsl #4
 160:	25ca0100 	strbcs	r0, [sl, #256]	; 0x100
 164:	02000000 	andeq	r0, r0, #0
 168:	06007791 			; <UNDEFINED> instruction: 0x06007791
 16c:	00000178 	andeq	r0, r0, r8, ror r1
 170:	03cac201 	biceq	ip, sl, #268435456	; 0x10000000
 174:	00462000 	subeq	r2, r6, r0
 178:	9c010000 	stcls	0, cr0, [r1], {-0}
 17c:	0000019d 	muleq	r0, sp, r1
 180:	0002320f 	andeq	r3, r2, pc, lsl #4
 184:	25c20100 	strbcs	r0, [r2, #256]	; 0x100
 188:	02000000 	andeq	r0, r0, #0
 18c:	420f7791 	andmi	r7, pc, #38010880	; 0x2440000
 190:	01000001 	tsteq	r0, r1
 194:	000025c2 	andeq	r2, r0, r2, asr #11
 198:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 19c:	00a50600 	adceq	r0, r5, r0, lsl #12
 1a0:	ba010000 	blt	401a8 <startup-0x1ffbfe58>
 1a4:	20000384 	andcs	r0, r0, r4, lsl #7
 1a8:	00000046 	andeq	r0, r0, r6, asr #32
 1ac:	01cf9c01 	biceq	r9, pc, r1, lsl #24
 1b0:	b30f0000 	movwlt	r0, #61440	; 0xf000
 1b4:	01000000 	mrseq	r0, (UNDEF: 0)
 1b8:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
 1bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1c0:	0001420f 	andeq	r4, r1, pc, lsl #4
 1c4:	25ba0100 	ldrcs	r0, [sl, #256]!	; 0x100
 1c8:	02000000 	andeq	r0, r0, #0
 1cc:	06007691 			; <UNDEFINED> instruction: 0x06007691
 1d0:	000001d1 	ldrdeq	r0, [r0], -r1
 1d4:	0308a401 	movweq	sl, #33793	; 0x8401
 1d8:	007c2000 	rsbseq	r2, ip, r0
 1dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 1e0:	00000201 	andeq	r0, r0, r1, lsl #4
 1e4:	00023c0f 	andeq	r3, r2, pc, lsl #24
 1e8:	25a40100 	strcs	r0, [r4, #256]!	; 0x100
 1ec:	02000000 	andeq	r0, r0, #0
 1f0:	420f7791 	andmi	r7, pc, #38010880	; 0x2440000
 1f4:	01000001 	tsteq	r0, r1
 1f8:	000025a4 	andeq	r2, r0, r4, lsr #11
 1fc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 200:	01110e00 	tsteq	r1, r0, lsl #28
 204:	8c010000 	stchi	0, cr0, [r1], {-0}
 208:	00000025 	andeq	r0, r0, r5, lsr #32
 20c:	20000274 	andcs	r0, r0, r4, ror r2
 210:	00000094 	muleq	r0, r4, r0
 214:	02359c01 	eorseq	r9, r5, #256	; 0x100
 218:	420f0000 	andmi	r0, pc, #0
 21c:	01000001 	tsteq	r0, r1
 220:	0000258c 	andeq	r2, r0, ip, lsl #11
 224:	6f910200 	svcvs	0x00910200
 228:	01006309 	tsteq	r0, r9, lsl #6
 22c:	0000258d 	andeq	r2, r0, sp, lsl #11
 230:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 234:	01650600 	cmneq	r5, r0, lsl #12
 238:	7a010000 	bvc	40240 <startup-0x1ffbfdc0>
 23c:	20000200 	andcs	r0, r0, r0, lsl #4
 240:	00000074 	andeq	r0, r0, r4, ror r0
 244:	02579c01 	subseq	r9, r7, #256	; 0x100
 248:	63090000 	movwvs	r0, #36864	; 0x9000
 24c:	257b0100 	ldrbcs	r0, [fp, #-256]!	; 0xffffff00
 250:	02000000 	andeq	r0, r0, #0
 254:	06007791 			; <UNDEFINED> instruction: 0x06007791
 258:	0000013b 	andeq	r0, r0, fp, lsr r1
 25c:	01a06601 	lsleq	r6, r1, #12
 260:	00602000 	rsbeq	r2, r0, r0
 264:	9c010000 	stcls	0, cr0, [r1], {-0}
 268:	0000027b 	andeq	r0, r0, fp, ror r2
 26c:	0001420f 	andeq	r4, r1, pc, lsl #4
 270:	25660100 	strbcs	r0, [r6, #-256]!	; 0xffffff00
 274:	02000000 	andeq	r0, r0, #0
 278:	10007791 	mulne	r0, r1, r7
 27c:	00000124 	andeq	r0, r0, r4, lsr #2
 280:	01505d01 	cmpeq	r0, r1, lsl #26
 284:	00502000 	subseq	r2, r0, r0
 288:	9c010000 	stcls	0, cr0, [r1], {-0}
 28c:	000002a9 	andeq	r0, r0, r9, lsr #5
 290:	01007807 	tsteq	r0, r7, lsl #16
 294:	0000255d 	andeq	r2, r0, sp, asr r5
 298:	6f910200 	svcvs	0x00910200
 29c:	01006309 	tsteq	r0, r9, lsl #6
 2a0:	0000255e 	andeq	r2, r0, lr, asr r5
 2a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2a8:	01b71000 			; <UNDEFINED> instruction: 0x01b71000
 2ac:	54010000 	strpl	r0, [r1], #-0
 2b0:	20000100 	andcs	r0, r0, r0, lsl #2
 2b4:	00000050 	andeq	r0, r0, r0, asr r0
 2b8:	02d79c01 	sbcseq	r9, r7, #256	; 0x100
 2bc:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
 2c0:	25540100 	ldrbcs	r0, [r4, #-256]	; 0xffffff00
 2c4:	02000000 	andeq	r0, r0, #0
 2c8:	63096f91 	movwvs	r6, #40849	; 0x9f91
 2cc:	25550100 	ldrbcs	r0, [r5, #-256]	; 0xffffff00
 2d0:	02000000 	andeq	r0, r0, #0
 2d4:	06007791 			; <UNDEFINED> instruction: 0x06007791
 2d8:	00000257 	andeq	r0, r0, r7, asr r2
 2dc:	00ba4601 	adcseq	r4, sl, r1, lsl #12
 2e0:	00462000 	subeq	r2, r6, r0
 2e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e8:	00000306 	andeq	r0, r0, r6, lsl #6
 2ec:	00736d07 	rsbseq	r6, r3, r7, lsl #26
 2f0:	005b4601 	subseq	r4, fp, r1, lsl #12
 2f4:	91020000 	mrsls	r0, (UNDEF: 2)
 2f8:	0069096c 	rsbeq	r0, r9, ip, ror #18
 2fc:	00d44701 	sbcseq	r4, r4, r1, lsl #14
 300:	91020000 	mrsls	r0, (UNDEF: 2)
 304:	bb060074 	bllt	1804dc <startup-0x1fe7fb24>
 308:	01000000 	mrseq	r0, (UNDEF: 0)
 30c:	0000803d 	andeq	r8, r0, sp, lsr r0
 310:	00003a20 	andeq	r3, r0, r0, lsr #20
 314:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
 318:	07000003 	streq	r0, [r0, -r3]
 31c:	01007375 	tsteq	r0, r5, ror r3
 320:	00005b3d 	andeq	r5, r0, sp, lsr fp
 324:	6c910200 	lfmvs	f0, 4, [r1], {0}
 328:	0000880b 	andeq	r8, r0, fp, lsl #16
 32c:	00002a20 	andeq	r2, r0, r0, lsr #20
 330:	00690900 	rsbeq	r0, r9, r0, lsl #18
 334:	00d43e01 	sbcseq	r3, r4, r1, lsl #28
 338:	91020000 	mrsls	r0, (UNDEF: 2)
 33c:	008e0b74 	addeq	r0, lr, r4, ror fp
 340:	00162000 	andseq	r2, r6, r0
 344:	6a090000 	bvs	24034c <startup-0x1fdbfcb4>
 348:	d43f0100 	ldrtle	r0, [pc], #-256	; 350 <startup-0x1ffffcb0>
 34c:	02000000 	andeq	r0, r0, #0
 350:	00007091 	muleq	r0, r1, r0
 354:	01591100 	cmpeq	r9, r0, lsl #2
 358:	33010000 	movwcc	r0, #4096	; 0x1000
 35c:	20000048 	andcs	r0, r0, r8, asr #32
 360:	00000038 	andeq	r0, r0, r8, lsr r0
 364:	4d119c01 	ldcmi	12, cr9, [r1, #-4]
 368:	01000001 	tsteq	r0, r1
 36c:	0000102a 	andeq	r1, r0, sl, lsr #32
 370:	00003820 	andeq	r3, r0, r0, lsr #16
 374:	119c0100 	orrsne	r0, ip, r0, lsl #2
 378:	00000194 	muleq	r0, r4, r1
 37c:	00000701 	andeq	r0, r0, r1, lsl #14
 380:	000c2000 	andeq	r2, ip, r0
 384:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  38:	06120111 			; <UNDEFINED> instruction: 0x06120111
  3c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  40:	00130119 	andseq	r0, r3, r9, lsl r1
  44:	00340500 	eorseq	r0, r4, r0, lsl #10
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	1349053b 	movtne	r0, #38203	; 0x953b
  50:	00001802 	andeq	r1, r0, r2, lsl #16
  54:	3f012e06 	svccc	0x00012e06
  58:	3a0e0319 	bcc	380cc4 <startup-0x1fc7f33c>
  5c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  60:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  64:	96184006 	ldrls	r4, [r8], -r6
  68:	13011942 	movwne	r1, #6466	; 0x1942
  6c:	05070000 	streq	r0, [r7, #-0]
  70:	3a080300 	bcc	200c78 <startup-0x1fdff388>
  74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	00180213 	andseq	r0, r8, r3, lsl r2
  7c:	00340800 	eorseq	r0, r4, r0, lsl #16
  80:	0b3a0e03 	bleq	e83894 <startup-0x1f17c76c>
  84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  88:	00001802 	andeq	r1, r0, r2, lsl #16
  8c:	03003409 	movweq	r3, #1033	; 0x409
  90:	3b0b3a08 	blcc	2ce8b8 <startup-0x1fd31748>
  94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  98:	0a000018 	beq	100 <startup-0x1fffff00>
  9c:	0b0b0024 	bleq	2c0134 <startup-0x1fd3fecc>
  a0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  a4:	0b0b0000 	bleq	2c00ac <startup-0x1fd3ff54>
  a8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  ac:	0c000006 	stceq	0, cr0, [r0], {6}
  b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  b4:	0b3a0e03 	bleq	e838c8 <startup-0x1f17c738>
  b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  c4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
  c8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  cc:	0b3a0e03 	bleq	e838e0 <startup-0x1f17c720>
  d0:	01110b3b 	tsteq	r1, fp, lsr fp
  d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d8:	00194297 	mulseq	r9, r7, r2
  dc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	13491927 	movtne	r1, #39207	; 0x9927
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	00050f00 	andeq	r0, r5, r0, lsl #30
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 104:	00001802 	andeq	r1, r0, r2, lsl #16
 108:	3f012e10 	svccc	0x00012e10
 10c:	3a0e0319 	bcc	380d78 <startup-0x1fc7f288>
 110:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 114:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 118:	97184006 	ldrls	r4, [r8, -r6]
 11c:	13011942 	movwne	r1, #6466	; 0x1942
 120:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 124:	03193f00 	tsteq	r9, #0, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	1119270b 	tstne	r9, fp, lsl #14
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 138:	Address 0x00000138 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000072c 	andeq	r0, r0, ip, lsr #14
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000073c 	andcs	r0, r0, ip, lsr r7
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001fa 	strdeq	r0, [r0], -sl
   4:	00600002 	rsbeq	r0, r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c695f66 	stclvs	15, cr5, [r9], #-408	; 0xfffffe68
  28:	6e4f2f6c 	cdpvs	15, 4, cr2, cr15, cr12, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
  34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  38:	2f746e65 	svccs	0x00746e65
  3c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  40:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  44:	6f697461 	svcvs	0x00697461
  48:	2f72656e 	svccs	0x0072656e
  4c:	70617267 	rsbvc	r7, r1, r7, ror #4
  50:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  54:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  58:	00007961 	andeq	r7, r0, r1, ror #18
  5c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  60:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  64:	00010063 	andeq	r0, r1, r3, rrx
  68:	05000000 	streq	r0, [r0, #-0]
  6c:	00000002 	andeq	r0, r0, r2
  70:	5e131920 	vnmlspl.f16	s2, s6, s1	; <UNPREDICTABLE>
  74:	01000302 	tsteq	r0, r2, lsl #6
  78:	02050001 	andeq	r0, r5, #1
  7c:	20000010 	andcs	r0, r0, r0, lsl r0
  80:	2f012903 	svccs	0x00012903
  84:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  88:	2fa03d21 	svccs	0x00a03d21
  8c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  90:	4ba13d21 	blmi	fe84f51c <main+0xde84ee70>
  94:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  98:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  9c:	002d0304 	eoreq	r0, sp, r4, lsl #6
  a0:	06010402 	streq	r0, [r1], -r2, lsl #8
  a4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
  a8:	003b0602 	eorseq	r0, fp, r2, lsl #12
  ac:	06010402 	streq	r0, [r1], -r2, lsl #8
  b0:	4d4f063c 	stclmi	6, cr0, [pc, #-240]	; ffffffc8 <main+0xdffff91c>
  b4:	0200214c 	andeq	r2, r0, #76, 2
  b8:	003d0304 	eorseq	r0, sp, r4, lsl #6
  bc:	2f030402 	svccs	0x00030402
  c0:	03040200 	movweq	r0, #16896	; 0x4200
  c4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
  c8:	02002f03 	andeq	r2, r0, #3, 30
  cc:	002a0304 	eoreq	r0, sl, r4, lsl #6
  d0:	06010402 	streq	r0, [r1], -r2, lsl #8
  d4:	6049063c 	subvs	r0, r9, ip, lsr r6
  d8:	67596878 			; <UNDEFINED> instruction: 0x67596878
  dc:	68694bc9 	stmdavs	r9!, {r0, r3, r6, r7, r8, r9, fp, lr}^
  e0:	4bbb6759 	blmi	feed9e4c <main+0xdeed97a0>
  e4:	11036777 	tstne	r3, r7, ror r7
  e8:	206f0374 	rsbcs	r0, pc, r4, ror r3	; <UNPREDICTABLE>
  ec:	034a1103 	movteq	r1, #41219	; 0xa103
  f0:	223d2071 	eorscs	r2, sp, #113	; 0x71
  f4:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
  f8:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  fc:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
 100:	3d30673d 	ldccc	7, cr6, [r0, #-244]!	; 0xffffff0c
 104:	2f3d752f 	svccs	0x003d752f
 108:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
 10c:	3d68bc3d 	stclcc	12, cr11, [r8, #-244]!	; 0xffffff0c
 110:	2f593d3d 	svccs	0x00593d3d
 114:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 118:	313d593d 	teqcc	sp, sp, lsr r9
 11c:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 120:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 124:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 128:	4b303d4b 	blmi	c0f65c <startup-0x1f3f09a4>
 12c:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 130:	3d91763e 	ldccc	6, cr7, [r1, #248]	; 0xf8
 134:	833d3d59 	teqhi	sp, #5696	; 0x1640
 138:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 13c:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 140:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 144:	2f843d2f 	svccs	0x00843d2f
 148:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 14c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 150:	4b4b4b3d 	blmi	12d2e4c <startup-0x1ed2d1b4>
 154:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 158:	4bad3d3d 	blmi	feb4f654 <main+0xdeb4efa8>
 15c:	03040200 	movweq	r0, #16896	; 0x4200
 160:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 164:	02004903 	andeq	r4, r0, #49152	; 0xc000
 168:	3c060104 	stfccs	f0, [r6], {4}
 16c:	02040200 	andeq	r0, r4, #0, 4
 170:	02003906 	andeq	r3, r0, #98304	; 0x18000
 174:	3c060104 	stfccs	f0, [r6], {4}
 178:	6a4c4306 	bvs	1310d98 <startup-0x1ecef268>
 17c:	01040200 	mrseq	r0, R12_usr
 180:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 184:	004a0204 	subeq	r0, sl, r4, lsl #4
 188:	4a030402 	bmi	c1198 <startup-0x1ff3ee68>
 18c:	08764d06 	ldmdaeq	r6!, {r1, r2, r8, sl, fp, lr}^
 190:	59595913 	ldmdbpl	r9, {r0, r1, r4, r8, fp, ip, lr}^
 194:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 198:	3d683d5a 	stclcc	13, cr3, [r8, #-360]!	; 0xfffffe98
 19c:	3e4b4d4b 	cdpcc	13, 4, cr4, cr11, cr11, {2}
 1a0:	bb91c9c9 	bllt	fe4728cc <main+0xde472220>
 1a4:	0392a13d 	orrseq	sl, r2, #1073741839	; 0x4000000f
 1a8:	2403ac5d 	strcs	sl, [r3], #-3165	; 0xfffff3a3
 1ac:	333e7720 	teqcc	lr, #32, 14	; 0x800000
 1b0:	03040200 	movweq	r0, #16896	; 0x4200
 1b4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 1b8:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 1bc:	3c060104 	stfccs	f0, [r6], {4}
 1c0:	02003f06 	andeq	r3, r0, #6, 30
 1c4:	003d0304 	eorseq	r0, sp, r4, lsl #6
 1c8:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
 1cc:	01040200 	mrseq	r0, R12_usr
 1d0:	3f063c06 	svccc	0x00063c06
 1d4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 1d8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1dc:	00650304 	rsbeq	r0, r5, r4, lsl #6
 1e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1e4:	003f063c 	eorseq	r0, pc, ip, lsr r6	; <UNPREDICTABLE>
 1e8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 1ec:	03040200 	movweq	r0, #16896	; 0x4200
 1f0:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 1f4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1f8:	00040240 	andeq	r0, r4, r0, asr #4
 1fc:	Address 0x000001fc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  14:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  28:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  2c:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  30:	6172622d 	cmnvs	r2, sp, lsr #4
  34:	2068636e 	rsbcs	r6, r8, lr, ror #6
  38:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  3c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  40:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  44:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  48:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  4c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  64:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  70:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  74:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  78:	616d2d20 	cmnvs	sp, r0, lsr #26
  7c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  80:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  84:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  88:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  8c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  90:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  94:	00393963 	eorseq	r3, r9, r3, ror #18
  98:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  9c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  a0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  a4:	61726700 	cmnvs	r2, r0, lsl #14
  a8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  ac:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  b0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  b4:	616d6d6f 	cmnvs	sp, pc, ror #26
  b8:	6400646e 	strvs	r6, [r0], #-1134	; 0xfffffb92
  bc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  c0:	6b696d5f 	blvs	1a5b644 <startup-0x1e5a49bc>
  c4:	43006f72 	movwmi	r6, #3954	; 0xf72
  c8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  cc:	2f737265 	svccs	0x00737265
  d0:	6c695f66 	stclvs	15, cr5, [r9], #-408	; 0xfffffe68
  d4:	6e4f2f6c 	cdpvs	15, 4, cr2, cr15, cr12, {3}
  d8:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  dc:	442f6576 	strtmi	r6, [pc], #-1398	; e4 <startup-0x1fffff1c>
  e0:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  e4:	2f746e65 	svccs	0x00746e65
  e8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  ec:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  f0:	6f697461 	svcvs	0x00697461
  f4:	2f72656e 	svccs	0x0072656e
  f8:	70617267 	rsbvc	r7, r1, r7, ror #4
  fc:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 100:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 104:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 108:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 10c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 110:	61726700 	cmnvs	r2, r0, lsl #14
 114:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 118:	6165725f 	cmnvs	r5, pc, asr r2
 11c:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 120:	006c6578 	rsbeq	r6, ip, r8, ror r5
 124:	70617267 	rsbvc	r7, r1, r7, ror #4
 128:	5f636968 	svcpl	0x00636968
 12c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 130:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 134:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 138:	73007261 	movwvc	r7, #609	; 0x261
 13c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 140:	6f635f74 	svcvs	0x00635f74
 144:	6f72746e 	svcvs	0x0072746e
 148:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 14c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 150:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 154:	736e3035 	cmnvc	lr, #53	; 0x35
 158:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 15c:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff803 <main+0xdffff157>
 160:	736e3030 	cmnvc	lr, #48	; 0x30
 164:	61726700 	cmnvs	r2, r0, lsl #14
 168:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 16c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 170:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 174:	00796461 	rsbseq	r6, r9, r1, ror #8
 178:	70617267 	rsbvc	r7, r1, r7, ror #4
 17c:	5f636968 	svcpl	0x00636968
 180:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 184:	61645f65 	cmnvs	r4, r5, ror #30
 188:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
 18c:	5f74696e 	svcpl	0x0074696e
 190:	00707061 	rsbseq	r7, r0, r1, rrx
 194:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 198:	00707574 	rsbseq	r7, r0, r4, ror r5
 19c:	6b73616d 	blvs	1cd8758 <startup-0x1e3278a8>
 1a0:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1a4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 1ac <startup-0x1ffffe54>
 1a8:	736e7500 	cmnvc	lr, #0, 10
 1ac:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 1b0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 1b4:	67007261 	strvs	r7, [r0, -r1, ror #4]
 1b8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1bc:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 1c0:	5f6c7274 	svcpl	0x006c7274
 1c4:	5f746962 	svcpl	0x00746962
 1c8:	00746573 	rsbseq	r6, r4, r3, ror r5
 1cc:	6e69616d 	powvsez	f6, f1, #5.0
 1d0:	61726700 	cmnvs	r2, r0, lsl #14
 1d4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1dc:	43006574 	movwmi	r6, #1396	; 0x574
 1e0:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
 1e4:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 1e8:	6c695f66 	stclvs	15, cr5, [r9], #-408	; 0xfffffe68
 1ec:	6e4f5c6c 	cdpvs	12, 4, cr5, cr15, cr12, {3}
 1f0:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 1f4:	445c6576 	ldrbmi	r6, [ip], #-1398	; 0xfffffa8a
 1f8:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 1fc:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
 200:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 204:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 208:	6f697461 	svcvs	0x00697461
 20c:	5c72656e 	cfldr64pl	mvdx6, [r2], #-440	; 0xfffffe48
 210:	70617267 	rsbvc	r7, r1, r7, ror #4
 214:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 218:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 21c:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
 220:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 224:	61726700 	cmnvs	r2, r0, lsl #14
 228:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 22c:	6165725f 	cmnvs	r5, pc, asr r2
 230:	61645f64 	cmnvs	r4, r4, ror #30
 234:	70006174 	andvc	r6, r0, r4, ror r1
 238:	00656761 	rsbeq	r6, r5, r1, ror #14
 23c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 240:	72670065 	rsbvc	r0, r7, #101	; 0x65
 244:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 248:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 24c:	5f726165 	svcpl	0x00726165
 250:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 254:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
 258:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 25c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 260:	6700696c 	strvs	r6, [r0, -ip, ror #18]
 264:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 268:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 26c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 270:	7a696c61 	bvc	1a5b3fc <startup-0x1e5a4c04>
 274:	Address 0x00000274 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffec62>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000048 	andcs	r0, r0, r8, asr #32
  48:	00000038 	andeq	r0, r0, r8, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000080 	andcs	r0, r0, r0, lsl #1
  64:	0000003a 	andeq	r0, r0, sl, lsr r0
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000ba 	strhcs	r0, [r0], -sl
  84:	00000046 	andeq	r0, r0, r6, asr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000100 	andcs	r0, r0, r0, lsl #2
  a4:	00000050 	andeq	r0, r0, r0, asr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	180e4101 	stmdane	lr, {r0, r8, lr}
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000150 	andcs	r0, r0, r0, asr r1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	180e4101 	stmdane	lr, {r0, r8, lr}
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001a0 	andcs	r0, r0, r0, lsr #3
  e4:	00000060 	andeq	r0, r0, r0, rrx
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000200 	andcs	r0, r0, r0, lsl #4
 104:	00000074 	andeq	r0, r0, r4, ror r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000274 	andcs	r0, r0, r4, ror r2
 124:	00000094 	muleq	r0, r4, r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000308 	andcs	r0, r0, r8, lsl #6
 144:	0000007c 	andeq	r0, r0, ip, ror r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000384 	andcs	r0, r0, r4, lsl #7
 164:	00000046 	andeq	r0, r0, r6, asr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	200003ca 	andcs	r0, r0, sl, asr #7
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000410 	andcs	r0, r0, r0, lsl r4
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	2000043a 	andcs	r0, r0, sl, lsr r4
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000454 	andcs	r0, r0, r4, asr r4
 1e0:	0000006e 	andeq	r0, r0, lr, rrx
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	200004c2 	andcs	r0, r0, r2, asr #9
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	00000000 	andeq	r0, r0, r0
 218:	2000051a 	andcs	r0, r0, sl, lsl r5
 21c:	00000192 	muleq	r0, r2, r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200006ac 	andcs	r0, r0, ip, lsr #13
 244:	00000090 	muleq	r0, r0, r0
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
