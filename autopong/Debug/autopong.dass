
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbfe 	bl	20000804 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#define B_CS1			0x8
#define B_SELECT 		0x4
#define B_RW 			0x2
#define B_RS 			0x1

void delay_250ns( void ){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* ( (unsigned long *) 0xE000E010) = 0x0;
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <delay_250ns+0x2c>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E014) = ( (168/4) -1 );
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <delay_250ns+0x30>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E018) = 0x0;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <delay_250ns+0x34>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	* ( (unsigned char *) 0xE000E010) = 0x5;
20000026:	4b05      	ldr	r3, [pc, #20]	; (2000003c <delay_250ns+0x2c>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while(* ( (unsigned char *) 0xE000E010) & 0x10000 == 0){}
2000002c:	46c0      	nop			; (mov r8, r8)
	* ( (unsigned long *) 0xE000E010) = 0x0;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <delay_250ns+0x2c>)
20000030:	2200      	movs	r2, #0
20000032:	601a      	str	r2, [r3, #0]
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	bd80      	pop	{r7, pc}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	e000e010 	and	lr, r0, r0, lsl r0
20000040:	e000e014 	and	lr, r0, r4, lsl r0
20000044:	e000e018 	and	lr, r0, r8, lsl r0

20000048 <delay_500ns>:

void delay_500ns( void ){
20000048:	b580      	push	{r7, lr}
2000004a:	af00      	add	r7, sp, #0
	* ( (unsigned long *) 0xE000E010) = 0x0;
2000004c:	4b09      	ldr	r3, [pc, #36]	; (20000074 <delay_500ns+0x2c>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E014) = ( (168/2) -1 );
20000052:	4b09      	ldr	r3, [pc, #36]	; (20000078 <delay_500ns+0x30>)
20000054:	2253      	movs	r2, #83	; 0x53
20000056:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E018) = 0x0;
20000058:	4b08      	ldr	r3, [pc, #32]	; (2000007c <delay_500ns+0x34>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
	* ( (unsigned char *) 0xE000E010) = 0x5;
2000005e:	4b05      	ldr	r3, [pc, #20]	; (20000074 <delay_500ns+0x2c>)
20000060:	2205      	movs	r2, #5
20000062:	701a      	strb	r2, [r3, #0]
	while(* ( (unsigned char *) 0xE000E010) & 0x10000 == 0){}
20000064:	46c0      	nop			; (mov r8, r8)
	* ( (unsigned long *) 0xE000E010) = 0x0;
20000066:	4b03      	ldr	r3, [pc, #12]	; (20000074 <delay_500ns+0x2c>)
20000068:	2200      	movs	r2, #0
2000006a:	601a      	str	r2, [r3, #0]
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	e000e010 	and	lr, r0, r0, lsl r0
20000078:	e000e014 	and	lr, r0, r4, lsl r0
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <delay_mikro>:

// Fördröj en mikro sekund
void delay_mikro(unsigned int us){
20000080:	b580      	push	{r7, lr}
20000082:	b084      	sub	sp, #16
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < us; i++){
20000088:	2300      	movs	r3, #0
2000008a:	60fb      	str	r3, [r7, #12]
2000008c:	e00d      	b.n	200000aa <delay_mikro+0x2a>
		for(int j = 0; j < 4; j++){
2000008e:	2300      	movs	r3, #0
20000090:	60bb      	str	r3, [r7, #8]
20000092:	e004      	b.n	2000009e <delay_mikro+0x1e>
			delay_250ns();
20000094:	f7ff ffbc 	bl	20000010 <delay_250ns>
		for(int j = 0; j < 4; j++){
20000098:	68bb      	ldr	r3, [r7, #8]
2000009a:	3301      	adds	r3, #1
2000009c:	60bb      	str	r3, [r7, #8]
2000009e:	68bb      	ldr	r3, [r7, #8]
200000a0:	2b03      	cmp	r3, #3
200000a2:	ddf7      	ble.n	20000094 <delay_mikro+0x14>
	for(int i = 0; i < us; i++){
200000a4:	68fb      	ldr	r3, [r7, #12]
200000a6:	3301      	adds	r3, #1
200000a8:	60fb      	str	r3, [r7, #12]
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	687a      	ldr	r2, [r7, #4]
200000ae:	429a      	cmp	r2, r3
200000b0:	d8ed      	bhi.n	2000008e <delay_mikro+0xe>
		}
	}
}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	46bd      	mov	sp, r7
200000b6:	b004      	add	sp, #16
200000b8:	bd80      	pop	{r7, pc}

200000ba <delay_milli>:

// Fördröj en milli sekund
void delay_milli(unsigned int ms){
200000ba:	b580      	push	{r7, lr}
200000bc:	b084      	sub	sp, #16
200000be:	af00      	add	r7, sp, #0
200000c0:	6078      	str	r0, [r7, #4]
	int i;
	while( ms-- ){
200000c2:	e011      	b.n	200000e8 <delay_milli+0x2e>
		for( i = 0; i < 1000; i++){
200000c4:	2300      	movs	r3, #0
200000c6:	60fb      	str	r3, [r7, #12]
200000c8:	e00a      	b.n	200000e0 <delay_milli+0x26>
			delay_250ns();
200000ca:	f7ff ffa1 	bl	20000010 <delay_250ns>
			delay_250ns();
200000ce:	f7ff ff9f 	bl	20000010 <delay_250ns>
			delay_250ns();
200000d2:	f7ff ff9d 	bl	20000010 <delay_250ns>
			delay_250ns();
200000d6:	f7ff ff9b 	bl	20000010 <delay_250ns>
		for( i = 0; i < 1000; i++){
200000da:	68fb      	ldr	r3, [r7, #12]
200000dc:	3301      	adds	r3, #1
200000de:	60fb      	str	r3, [r7, #12]
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	4a06      	ldr	r2, [pc, #24]	; (200000fc <delay_milli+0x42>)
200000e4:	4293      	cmp	r3, r2
200000e6:	ddf0      	ble.n	200000ca <delay_milli+0x10>
	while( ms-- ){
200000e8:	687b      	ldr	r3, [r7, #4]
200000ea:	1e5a      	subs	r2, r3, #1
200000ec:	607a      	str	r2, [r7, #4]
200000ee:	2b00      	cmp	r3, #0
200000f0:	d1e8      	bne.n	200000c4 <delay_milli+0xa>
		}
	}
}
200000f2:	46c0      	nop			; (mov r8, r8)
200000f4:	46bd      	mov	sp, r7
200000f6:	b004      	add	sp, #16
200000f8:	bd80      	pop	{r7, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	000003e7 	andeq	r0, r0, r7, ror #7

20000100 <graphic_ctrl_bit_set>:

typedef unsigned char uint8_t;
/* Välj grafik-display och ettställ de bitar som är 1 i x */
void graphic_ctrl_bit_set( uint8_t x ){
20000100:	b580      	push	{r7, lr}
20000102:	b084      	sub	sp, #16
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
2000010c:	4a0f      	ldr	r2, [pc, #60]	; (2000014c <graphic_ctrl_bit_set+0x4c>)
2000010e:	200f      	movs	r0, #15
20000110:	183b      	adds	r3, r7, r0
20000112:	7812      	ldrb	r2, [r2, #0]
20000114:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000116:	183b      	adds	r3, r7, r0
20000118:	183a      	adds	r2, r7, r0
2000011a:	7812      	ldrb	r2, [r2, #0]
2000011c:	2104      	movs	r1, #4
2000011e:	438a      	bics	r2, r1
20000120:	701a      	strb	r2, [r3, #0]
	c |= ( ~B_SELECT & x);
20000122:	1dfb      	adds	r3, r7, #7
20000124:	781b      	ldrb	r3, [r3, #0]
20000126:	b25b      	sxtb	r3, r3
20000128:	2204      	movs	r2, #4
2000012a:	4393      	bics	r3, r2
2000012c:	b25a      	sxtb	r2, r3
2000012e:	183b      	adds	r3, r7, r0
20000130:	781b      	ldrb	r3, [r3, #0]
20000132:	b25b      	sxtb	r3, r3
20000134:	4313      	orrs	r3, r2
20000136:	b25a      	sxtb	r2, r3
20000138:	183b      	adds	r3, r7, r0
2000013a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000013c:	4a03      	ldr	r2, [pc, #12]	; (2000014c <graphic_ctrl_bit_set+0x4c>)
2000013e:	183b      	adds	r3, r7, r0
20000140:	781b      	ldrb	r3, [r3, #0]
20000142:	7013      	strb	r3, [r2, #0]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b004      	add	sp, #16
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021014 	andmi	r1, r2, r4, lsl r0

20000150 <graphic_ctrl_bit_clear>:

/* Välj grafisk-diaplay och nollställ de bitar som är 1 i x */
void graphic_ctrl_bit_clear( uint8_t x ){
20000150:	b580      	push	{r7, lr}
20000152:	b084      	sub	sp, #16
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
2000015c:	4a0f      	ldr	r2, [pc, #60]	; (2000019c <graphic_ctrl_bit_clear+0x4c>)
2000015e:	200f      	movs	r0, #15
20000160:	183b      	adds	r3, r7, r0
20000162:	7812      	ldrb	r2, [r2, #0]
20000164:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000166:	183b      	adds	r3, r7, r0
20000168:	183a      	adds	r2, r7, r0
2000016a:	7812      	ldrb	r2, [r2, #0]
2000016c:	2104      	movs	r1, #4
2000016e:	438a      	bics	r2, r1
20000170:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000172:	1dfb      	adds	r3, r7, #7
20000174:	781b      	ldrb	r3, [r3, #0]
20000176:	b25b      	sxtb	r3, r3
20000178:	43db      	mvns	r3, r3
2000017a:	b25b      	sxtb	r3, r3
2000017c:	183a      	adds	r2, r7, r0
2000017e:	7812      	ldrb	r2, [r2, #0]
20000180:	b252      	sxtb	r2, r2
20000182:	4013      	ands	r3, r2
20000184:	b25a      	sxtb	r2, r3
20000186:	183b      	adds	r3, r7, r0
20000188:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000018a:	4a04      	ldr	r2, [pc, #16]	; (2000019c <graphic_ctrl_bit_clear+0x4c>)
2000018c:	183b      	adds	r3, r7, r0
2000018e:	781b      	ldrb	r3, [r3, #0]
20000190:	7013      	strb	r3, [r2, #0]
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b004      	add	sp, #16
20000198:	bd80      	pop	{r7, pc}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	40021014 	andmi	r1, r2, r4, lsl r0

200001a0 <select_controller>:

/* konfigurera CS-signalerna */
void select_controller( uint8_t controller){
200001a0:	b580      	push	{r7, lr}
200001a2:	b082      	sub	sp, #8
200001a4:	af00      	add	r7, sp, #0
200001a6:	0002      	movs	r2, r0
200001a8:	1dfb      	adds	r3, r7, #7
200001aa:	701a      	strb	r2, [r3, #0]
	switch(controller){
200001ac:	1dfb      	adds	r3, r7, #7
200001ae:	781b      	ldrb	r3, [r3, #0]
200001b0:	2b08      	cmp	r3, #8
200001b2:	d00c      	beq.n	200001ce <select_controller+0x2e>
200001b4:	dc02      	bgt.n	200001bc <select_controller+0x1c>
200001b6:	2b00      	cmp	r3, #0
200001b8:	d005      	beq.n	200001c6 <select_controller+0x26>
		case B_CS1|B_CS2:
			graphic_ctrl_bit_set(B_CS1);
			graphic_ctrl_bit_set(B_CS2);
			break;
	}	
}
200001ba:	e01d      	b.n	200001f8 <select_controller+0x58>
	switch(controller){
200001bc:	2b10      	cmp	r3, #16
200001be:	d00d      	beq.n	200001dc <select_controller+0x3c>
200001c0:	2b18      	cmp	r3, #24
200001c2:	d012      	beq.n	200001ea <select_controller+0x4a>
}
200001c4:	e018      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ffc2 	bl	20000150 <graphic_ctrl_bit_clear>
			break;
200001cc:	e014      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_set(B_CS1);
200001ce:	2008      	movs	r0, #8
200001d0:	f7ff ff96 	bl	20000100 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200001d4:	2010      	movs	r0, #16
200001d6:	f7ff ffbb 	bl	20000150 <graphic_ctrl_bit_clear>
			break;
200001da:	e00d      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_clear(B_CS1);
200001dc:	2008      	movs	r0, #8
200001de:	f7ff ffb7 	bl	20000150 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2);
200001e2:	2010      	movs	r0, #16
200001e4:	f7ff ff8c 	bl	20000100 <graphic_ctrl_bit_set>
			break;
200001e8:	e006      	b.n	200001f8 <select_controller+0x58>
			graphic_ctrl_bit_set(B_CS1);
200001ea:	2008      	movs	r0, #8
200001ec:	f7ff ff88 	bl	20000100 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2);
200001f0:	2010      	movs	r0, #16
200001f2:	f7ff ff85 	bl	20000100 <graphic_ctrl_bit_set>
			break;
200001f6:	46c0      	nop			; (mov r8, r8)
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b002      	add	sp, #8
200001fe:	bd80      	pop	{r7, pc}

20000200 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000200:	b580      	push	{r7, lr}
20000202:	b082      	sub	sp, #8
20000204:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000206:	2040      	movs	r0, #64	; 0x40
20000208:	f7ff ffa2 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000020c:	4b15      	ldr	r3, [pc, #84]	; (20000264 <graphic_wait_ready+0x64>)
2000020e:	4a16      	ldr	r2, [pc, #88]	; (20000268 <graphic_wait_ready+0x68>)
20000210:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS); graphic_ctrl_bit_set(B_RW);
20000212:	2001      	movs	r0, #1
20000214:	f7ff ff9c 	bl	20000150 <graphic_ctrl_bit_clear>
20000218:	2002      	movs	r0, #2
2000021a:	f7ff ff71 	bl	20000100 <graphic_ctrl_bit_set>
	delay_500ns();
2000021e:	f7ff ff13 	bl	20000048 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
20000222:	2040      	movs	r0, #64	; 0x40
20000224:	f7ff ff6c 	bl	20000100 <graphic_ctrl_bit_set>
		delay_500ns();
20000228:	f7ff ff0e 	bl	20000048 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY;
2000022c:	4b0f      	ldr	r3, [pc, #60]	; (2000026c <graphic_wait_ready+0x6c>)
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	b2da      	uxtb	r2, r3
20000232:	1dfb      	adds	r3, r7, #7
20000234:	217f      	movs	r1, #127	; 0x7f
20000236:	438a      	bics	r2, r1
20000238:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000023a:	2040      	movs	r0, #64	; 0x40
2000023c:	f7ff ff88 	bl	20000150 <graphic_ctrl_bit_clear>
		delay_500ns();
20000240:	f7ff ff02 	bl	20000048 <delay_500ns>
		if(c == 0){break;} 
20000244:	1dfb      	adds	r3, r7, #7
20000246:	781b      	ldrb	r3, [r3, #0]
20000248:	2b00      	cmp	r3, #0
2000024a:	d000      	beq.n	2000024e <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000024c:	e7e9      	b.n	20000222 <graphic_wait_ready+0x22>
		if(c == 0){break;} 
2000024e:	46c0      	nop			; (mov r8, r8)
	}
	graphic_ctrl_bit_set(B_E);
20000250:	2040      	movs	r0, #64	; 0x40
20000252:	f7ff ff55 	bl	20000100 <graphic_ctrl_bit_set>
	*portModer = 0x55555555;
20000256:	4b03      	ldr	r3, [pc, #12]	; (20000264 <graphic_wait_ready+0x64>)
20000258:	4a05      	ldr	r2, [pc, #20]	; (20000270 <graphic_wait_ready+0x70>)
2000025a:	601a      	str	r2, [r3, #0]
}
2000025c:	46c0      	nop			; (mov r8, r8)
2000025e:	46bd      	mov	sp, r7
20000260:	b002      	add	sp, #8
20000262:	bd80      	pop	{r7, pc}
20000264:	40021000 	andmi	r1, r2, r0
20000268:	00005555 	andeq	r5, r0, r5, asr r5
2000026c:	40021011 	andmi	r1, r2, r1, lsl r0
20000270:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000274 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000274:	b580      	push	{r7, lr}
20000276:	b084      	sub	sp, #16
20000278:	af00      	add	r7, sp, #0
2000027a:	0002      	movs	r2, r0
2000027c:	1dfb      	adds	r3, r7, #7
2000027e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000280:	2040      	movs	r0, #64	; 0x40
20000282:	f7ff ff65 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000286:	4b1c      	ldr	r3, [pc, #112]	; (200002f8 <graphic_read+0x84>)
20000288:	4a1c      	ldr	r2, [pc, #112]	; (200002fc <graphic_read+0x88>)
2000028a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
2000028c:	2003      	movs	r0, #3
2000028e:	f7ff ff37 	bl	20000100 <graphic_ctrl_bit_set>
	select_controller(controller);
20000292:	1dfb      	adds	r3, r7, #7
20000294:	781b      	ldrb	r3, [r3, #0]
20000296:	0018      	movs	r0, r3
20000298:	f7ff ff82 	bl	200001a0 <select_controller>
	delay_500ns();
2000029c:	f7ff fed4 	bl	20000048 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002a0:	2040      	movs	r0, #64	; 0x40
200002a2:	f7ff ff2d 	bl	20000100 <graphic_ctrl_bit_set>
	delay_500ns();
200002a6:	f7ff fecf 	bl	20000048 <delay_500ns>
	c = *portIdrHigh;
200002aa:	4a15      	ldr	r2, [pc, #84]	; (20000300 <graphic_read+0x8c>)
200002ac:	230f      	movs	r3, #15
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	7812      	ldrb	r2, [r2, #0]
200002b2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ff4b 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
200002ba:	4b0f      	ldr	r3, [pc, #60]	; (200002f8 <graphic_read+0x84>)
200002bc:	4a11      	ldr	r2, [pc, #68]	; (20000304 <graphic_read+0x90>)
200002be:	601a      	str	r2, [r3, #0]
	if(controller & B_CS1){
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	781b      	ldrb	r3, [r3, #0]
200002c4:	2208      	movs	r2, #8
200002c6:	4013      	ands	r3, r2
200002c8:	d004      	beq.n	200002d4 <graphic_read+0x60>
		select_controller(B_CS1);
200002ca:	2008      	movs	r0, #8
200002cc:	f7ff ff68 	bl	200001a0 <select_controller>
		graphic_wait_ready();
200002d0:	f7ff ff96 	bl	20000200 <graphic_wait_ready>
	}
	// Får man samma resultat med "==" ist för &?
	if(controller & B_CS2){
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	2210      	movs	r2, #16
200002da:	4013      	ands	r3, r2
200002dc:	d004      	beq.n	200002e8 <graphic_read+0x74>
		select_controller(B_CS2);
200002de:	2010      	movs	r0, #16
200002e0:	f7ff ff5e 	bl	200001a0 <select_controller>
		graphic_wait_ready();
200002e4:	f7ff ff8c 	bl	20000200 <graphic_wait_ready>
	}
	return c;
200002e8:	230f      	movs	r3, #15
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	781b      	ldrb	r3, [r3, #0]
}
200002ee:	0018      	movs	r0, r3
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)
200002f8:	40021000 	andmi	r1, r2, r0
200002fc:	00005555 	andeq	r5, r0, r5, asr r5
20000300:	40021011 	andmi	r1, r2, r1, lsl r0
20000304:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000308 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	0002      	movs	r2, r0
20000310:	1dfb      	adds	r3, r7, #7
20000312:	701a      	strb	r2, [r3, #0]
20000314:	1dbb      	adds	r3, r7, #6
20000316:	1c0a      	adds	r2, r1, #0
20000318:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value;
2000031a:	4a19      	ldr	r2, [pc, #100]	; (20000380 <graphic_write+0x78>)
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000322:	1dbb      	adds	r3, r7, #6
20000324:	781b      	ldrb	r3, [r3, #0]
20000326:	0018      	movs	r0, r3
20000328:	f7ff ff3a 	bl	200001a0 <select_controller>
	delay_500ns();
2000032c:	f7ff fe8c 	bl	20000048 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff fee5 	bl	20000100 <graphic_ctrl_bit_set>
	delay_500ns();
20000336:	f7ff fe87 	bl	20000048 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff ff08 	bl	20000150 <graphic_ctrl_bit_clear>
	
	if(controller && B_CS1){
20000340:	1dbb      	adds	r3, r7, #6
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	2b00      	cmp	r3, #0
20000346:	d004      	beq.n	20000352 <graphic_write+0x4a>
		select_controller(B_CS1);
20000348:	2008      	movs	r0, #8
2000034a:	f7ff ff29 	bl	200001a0 <select_controller>
		graphic_wait_ready();
2000034e:	f7ff ff57 	bl	20000200 <graphic_wait_ready>
	}
	if(controller && B_CS2){
20000352:	1dbb      	adds	r3, r7, #6
20000354:	781b      	ldrb	r3, [r3, #0]
20000356:	2b00      	cmp	r3, #0
20000358:	d004      	beq.n	20000364 <graphic_write+0x5c>
		select_controller(B_CS2);
2000035a:	2010      	movs	r0, #16
2000035c:	f7ff ff20 	bl	200001a0 <select_controller>
		graphic_wait_ready();
20000360:	f7ff ff4e 	bl	20000200 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000364:	4b06      	ldr	r3, [pc, #24]	; (20000380 <graphic_write+0x78>)
20000366:	2200      	movs	r2, #0
20000368:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000036a:	2040      	movs	r0, #64	; 0x40
2000036c:	f7ff fec8 	bl	20000100 <graphic_ctrl_bit_set>
	select_controller(0);
20000370:	2000      	movs	r0, #0
20000372:	f7ff ff15 	bl	200001a0 <select_controller>
	
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b002      	add	sp, #8
2000037c:	bd80      	pop	{r7, pc}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	40021015 	andmi	r1, r2, r5, lsl r0

20000384 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000384:	b580      	push	{r7, lr}
20000386:	b082      	sub	sp, #8
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
20000390:	1dbb      	adds	r3, r7, #6
20000392:	1c0a      	adds	r2, r1, #0
20000394:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000396:	2040      	movs	r0, #64	; 0x40
20000398:	f7ff feda 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000039c:	1dbb      	adds	r3, r7, #6
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	0018      	movs	r0, r3
200003a2:	f7ff fefd 	bl	200001a0 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200003a6:	2001      	movs	r0, #1
200003a8:	f7ff fed2 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200003ac:	2002      	movs	r0, #2
200003ae:	f7ff fecf 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200003b2:	1dbb      	adds	r3, r7, #6
200003b4:	781a      	ldrb	r2, [r3, #0]
200003b6:	1dfb      	adds	r3, r7, #7
200003b8:	781b      	ldrb	r3, [r3, #0]
200003ba:	0011      	movs	r1, r2
200003bc:	0018      	movs	r0, r3
200003be:	f7ff ffa3 	bl	20000308 <graphic_write>
}
200003c2:	46c0      	nop			; (mov r8, r8)
200003c4:	46bd      	mov	sp, r7
200003c6:	b002      	add	sp, #8
200003c8:	bd80      	pop	{r7, pc}

200003ca <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200003ca:	b580      	push	{r7, lr}
200003cc:	b082      	sub	sp, #8
200003ce:	af00      	add	r7, sp, #0
200003d0:	0002      	movs	r2, r0
200003d2:	1dfb      	adds	r3, r7, #7
200003d4:	701a      	strb	r2, [r3, #0]
200003d6:	1dbb      	adds	r3, r7, #6
200003d8:	1c0a      	adds	r2, r1, #0
200003da:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff feb7 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003e2:	1dbb      	adds	r3, r7, #6
200003e4:	781b      	ldrb	r3, [r3, #0]
200003e6:	0018      	movs	r0, r3
200003e8:	f7ff feda 	bl	200001a0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003ec:	2001      	movs	r0, #1
200003ee:	f7ff fe87 	bl	20000100 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003f2:	2002      	movs	r0, #2
200003f4:	f7ff feac 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003f8:	1dbb      	adds	r3, r7, #6
200003fa:	781a      	ldrb	r2, [r3, #0]
200003fc:	1dfb      	adds	r3, r7, #7
200003fe:	781b      	ldrb	r3, [r3, #0]
20000400:	0011      	movs	r1, r2
20000402:	0018      	movs	r0, r3
20000404:	f7ff ff80 	bl	20000308 <graphic_write>
}
20000408:	46c0      	nop			; (mov r8, r8)
2000040a:	46bd      	mov	sp, r7
2000040c:	b002      	add	sp, #8
2000040e:	bd80      	pop	{r7, pc}

20000410 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
20000410:	b580      	push	{r7, lr}
20000412:	b082      	sub	sp, #8
20000414:	af00      	add	r7, sp, #0
20000416:	0002      	movs	r2, r0
20000418:	1dfb      	adds	r3, r7, #7
2000041a:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000041c:	1dfb      	adds	r3, r7, #7
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	0018      	movs	r0, r3
20000422:	f7ff ff27 	bl	20000274 <graphic_read>
	return graphic_read(controller);
20000426:	1dfb      	adds	r3, r7, #7
20000428:	781b      	ldrb	r3, [r3, #0]
2000042a:	0018      	movs	r0, r3
2000042c:	f7ff ff22 	bl	20000274 <graphic_read>
20000430:	0003      	movs	r3, r0
}
20000432:	0018      	movs	r0, r3
20000434:	46bd      	mov	sp, r7
20000436:	b002      	add	sp, #8
20000438:	bd80      	pop	{r7, pc}

2000043a <init_app>:

void init_app(){
2000043a:	b580      	push	{r7, lr}
2000043c:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
2000043e:	4b03      	ldr	r3, [pc, #12]	; (2000044c <init_app+0x12>)
20000440:	4a03      	ldr	r2, [pc, #12]	; (20000450 <init_app+0x16>)
20000442:	601a      	str	r2, [r3, #0]
}
20000444:	46c0      	nop			; (mov r8, r8)
20000446:	46bd      	mov	sp, r7
20000448:	bd80      	pop	{r7, pc}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	40021000 	andmi	r1, r2, r0
20000450:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000454 <graphic_initialize>:

void graphic_initialize(void){
20000454:	b580      	push	{r7, lr}
20000456:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000458:	2040      	movs	r0, #64	; 0x40
2000045a:	f7ff fe51 	bl	20000100 <graphic_ctrl_bit_set>
	delay_mikro(10);
2000045e:	200a      	movs	r0, #10
20000460:	f7ff fe0e 	bl	20000080 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1);
20000464:	2008      	movs	r0, #8
20000466:	f7ff fe73 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000046a:	2010      	movs	r0, #16
2000046c:	f7ff fe70 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000470:	2020      	movs	r0, #32
20000472:	f7ff fe6d 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20000476:	2040      	movs	r0, #64	; 0x40
20000478:	f7ff fe6a 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000047c:	201e      	movs	r0, #30
2000047e:	f7ff fe1c 	bl	200000ba <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000482:	2020      	movs	r0, #32
20000484:	f7ff fe3c 	bl	20000100 <graphic_ctrl_bit_set>
	delay_milli(100);
20000488:	2064      	movs	r0, #100	; 0x64
2000048a:	f7ff fe16 	bl	200000ba <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000048e:	2118      	movs	r1, #24
20000490:	203e      	movs	r0, #62	; 0x3e
20000492:	f7ff ff77 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000496:	2118      	movs	r1, #24
20000498:	203f      	movs	r0, #63	; 0x3f
2000049a:	f7ff ff73 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000049e:	2118      	movs	r1, #24
200004a0:	20c0      	movs	r0, #192	; 0xc0
200004a2:	f7ff ff6f 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200004a6:	2118      	movs	r1, #24
200004a8:	2040      	movs	r0, #64	; 0x40
200004aa:	f7ff ff6b 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200004ae:	2118      	movs	r1, #24
200004b0:	20b8      	movs	r0, #184	; 0xb8
200004b2:	f7ff ff67 	bl	20000384 <graphic_write_command>
	select_controller(0);
200004b6:	2000      	movs	r0, #0
200004b8:	f7ff fe72 	bl	200001a0 <select_controller>
}
200004bc:	46c0      	nop			; (mov r8, r8)
200004be:	46bd      	mov	sp, r7
200004c0:	bd80      	pop	{r7, pc}

200004c2 <graphic_clear_screen>:

void graphic_clear_screen( void ){
200004c2:	b580      	push	{r7, lr}
200004c4:	b082      	sub	sp, #8
200004c6:	af00      	add	r7, sp, #0
	for(int page = 0; page < 8; page++){
200004c8:	2300      	movs	r3, #0
200004ca:	607b      	str	r3, [r7, #4]
200004cc:	e01e      	b.n	2000050c <graphic_clear_screen+0x4a>
		graphic_write(LCD_SET_PAGE | page, B_CS1|B_CS2);
200004ce:	687b      	ldr	r3, [r7, #4]
200004d0:	b25b      	sxtb	r3, r3
200004d2:	2248      	movs	r2, #72	; 0x48
200004d4:	4252      	negs	r2, r2
200004d6:	4313      	orrs	r3, r2
200004d8:	b25b      	sxtb	r3, r3
200004da:	b2db      	uxtb	r3, r3
200004dc:	2118      	movs	r1, #24
200004de:	0018      	movs	r0, r3
200004e0:	f7ff ff12 	bl	20000308 <graphic_write>
		graphic_write(LCD_SET_ADD | 0, B_CS1|B_CS2);
200004e4:	2118      	movs	r1, #24
200004e6:	2040      	movs	r0, #64	; 0x40
200004e8:	f7ff ff0e 	bl	20000308 <graphic_write>
		for(int add = 0; add < 64; add++){
200004ec:	2300      	movs	r3, #0
200004ee:	603b      	str	r3, [r7, #0]
200004f0:	e006      	b.n	20000500 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1|B_CS2);
200004f2:	2118      	movs	r1, #24
200004f4:	2000      	movs	r0, #0
200004f6:	f7ff ff68 	bl	200003ca <graphic_write_data>
		for(int add = 0; add < 64; add++){
200004fa:	683b      	ldr	r3, [r7, #0]
200004fc:	3301      	adds	r3, #1
200004fe:	603b      	str	r3, [r7, #0]
20000500:	683b      	ldr	r3, [r7, #0]
20000502:	2b3f      	cmp	r3, #63	; 0x3f
20000504:	ddf5      	ble.n	200004f2 <graphic_clear_screen+0x30>
	for(int page = 0; page < 8; page++){
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	3301      	adds	r3, #1
2000050a:	607b      	str	r3, [r7, #4]
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	2b07      	cmp	r3, #7
20000510:	dddd      	ble.n	200004ce <graphic_clear_screen+0xc>
		}
	}
}
20000512:	46c0      	nop			; (mov r8, r8)
20000514:	46bd      	mov	sp, r7
20000516:	b002      	add	sp, #8
20000518:	bd80      	pop	{r7, pc}

2000051a <pixel>:

void pixel(int x, int y, int set){
2000051a:	b5b0      	push	{r4, r5, r7, lr}
2000051c:	b088      	sub	sp, #32
2000051e:	af00      	add	r7, sp, #0
20000520:	60f8      	str	r0, [r7, #12]
20000522:	60b9      	str	r1, [r7, #8]
20000524:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if( (x < 1) || (x > 128) || (y < 1) || (y > 64)){
20000526:	68fb      	ldr	r3, [r7, #12]
20000528:	2b00      	cmp	r3, #0
2000052a:	dc00      	bgt.n	2000052e <pixel+0x14>
2000052c:	e0b6      	b.n	2000069c <pixel+0x182>
2000052e:	68fb      	ldr	r3, [r7, #12]
20000530:	2b80      	cmp	r3, #128	; 0x80
20000532:	dd00      	ble.n	20000536 <pixel+0x1c>
20000534:	e0b2      	b.n	2000069c <pixel+0x182>
20000536:	68bb      	ldr	r3, [r7, #8]
20000538:	2b00      	cmp	r3, #0
2000053a:	dc00      	bgt.n	2000053e <pixel+0x24>
2000053c:	e0ae      	b.n	2000069c <pixel+0x182>
2000053e:	68bb      	ldr	r3, [r7, #8]
20000540:	2b40      	cmp	r3, #64	; 0x40
20000542:	dd00      	ble.n	20000546 <pixel+0x2c>
20000544:	e0aa      	b.n	2000069c <pixel+0x182>
		return;
	}
	index = (y-1) / 8;
20000546:	68bb      	ldr	r3, [r7, #8]
20000548:	3b01      	subs	r3, #1
2000054a:	2b00      	cmp	r3, #0
2000054c:	da00      	bge.n	20000550 <pixel+0x36>
2000054e:	3307      	adds	r3, #7
20000550:	10db      	asrs	r3, r3, #3
20000552:	61bb      	str	r3, [r7, #24]
	
	switch((y-1)%8){
20000554:	68bb      	ldr	r3, [r7, #8]
20000556:	3b01      	subs	r3, #1
20000558:	4a52      	ldr	r2, [pc, #328]	; (200006a4 <pixel+0x18a>)
2000055a:	4013      	ands	r3, r2
2000055c:	d504      	bpl.n	20000568 <pixel+0x4e>
2000055e:	3b01      	subs	r3, #1
20000560:	2208      	movs	r2, #8
20000562:	4252      	negs	r2, r2
20000564:	4313      	orrs	r3, r2
20000566:	3301      	adds	r3, #1
20000568:	2b07      	cmp	r3, #7
2000056a:	d82c      	bhi.n	200005c6 <pixel+0xac>
2000056c:	009a      	lsls	r2, r3, #2
2000056e:	4b4e      	ldr	r3, [pc, #312]	; (200006a8 <pixel+0x18e>)
20000570:	18d3      	adds	r3, r2, r3
20000572:	681b      	ldr	r3, [r3, #0]
20000574:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000576:	231f      	movs	r3, #31
20000578:	18fb      	adds	r3, r7, r3
2000057a:	2201      	movs	r2, #1
2000057c:	701a      	strb	r2, [r3, #0]
2000057e:	e022      	b.n	200005c6 <pixel+0xac>
		case 1: mask = 2; break; 
20000580:	231f      	movs	r3, #31
20000582:	18fb      	adds	r3, r7, r3
20000584:	2202      	movs	r2, #2
20000586:	701a      	strb	r2, [r3, #0]
20000588:	e01d      	b.n	200005c6 <pixel+0xac>
		case 2: mask = 4; break; 
2000058a:	231f      	movs	r3, #31
2000058c:	18fb      	adds	r3, r7, r3
2000058e:	2204      	movs	r2, #4
20000590:	701a      	strb	r2, [r3, #0]
20000592:	e018      	b.n	200005c6 <pixel+0xac>
		case 3: mask = 8; break; 
20000594:	231f      	movs	r3, #31
20000596:	18fb      	adds	r3, r7, r3
20000598:	2208      	movs	r2, #8
2000059a:	701a      	strb	r2, [r3, #0]
2000059c:	e013      	b.n	200005c6 <pixel+0xac>
		case 4: mask = 0x10; break; 
2000059e:	231f      	movs	r3, #31
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	2210      	movs	r2, #16
200005a4:	701a      	strb	r2, [r3, #0]
200005a6:	e00e      	b.n	200005c6 <pixel+0xac>
		case 5: mask = 0x20; break; 
200005a8:	231f      	movs	r3, #31
200005aa:	18fb      	adds	r3, r7, r3
200005ac:	2220      	movs	r2, #32
200005ae:	701a      	strb	r2, [r3, #0]
200005b0:	e009      	b.n	200005c6 <pixel+0xac>
		case 6: mask = 0x40; break; 
200005b2:	231f      	movs	r3, #31
200005b4:	18fb      	adds	r3, r7, r3
200005b6:	2240      	movs	r2, #64	; 0x40
200005b8:	701a      	strb	r2, [r3, #0]
200005ba:	e004      	b.n	200005c6 <pixel+0xac>
		case 7: mask = 0x80; break; 
200005bc:	231f      	movs	r3, #31
200005be:	18fb      	adds	r3, r7, r3
200005c0:	2280      	movs	r2, #128	; 0x80
200005c2:	701a      	strb	r2, [r3, #0]
200005c4:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	2b00      	cmp	r3, #0
200005ca:	d105      	bne.n	200005d8 <pixel+0xbe>
		mask = ~mask;
200005cc:	221f      	movs	r2, #31
200005ce:	18bb      	adds	r3, r7, r2
200005d0:	18ba      	adds	r2, r7, r2
200005d2:	7812      	ldrb	r2, [r2, #0]
200005d4:	43d2      	mvns	r2, r2
200005d6:	701a      	strb	r2, [r3, #0]
	}
	if(x > 64){
200005d8:	68fb      	ldr	r3, [r7, #12]
200005da:	2b40      	cmp	r3, #64	; 0x40
200005dc:	dd07      	ble.n	200005ee <pixel+0xd4>
		controller = B_CS2;
200005de:	231e      	movs	r3, #30
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	2210      	movs	r2, #16
200005e4:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200005e6:	68fb      	ldr	r3, [r7, #12]
200005e8:	3b41      	subs	r3, #65	; 0x41
200005ea:	60fb      	str	r3, [r7, #12]
200005ec:	e006      	b.n	200005fc <pixel+0xe2>
	}
	else{
		controller = B_CS1;
200005ee:	231e      	movs	r3, #30
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	2208      	movs	r2, #8
200005f4:	701a      	strb	r2, [r3, #0]
		x = x - 1;
200005f6:	68fb      	ldr	r3, [r7, #12]
200005f8:	3b01      	subs	r3, #1
200005fa:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
200005fc:	68fb      	ldr	r3, [r7, #12]
200005fe:	b25b      	sxtb	r3, r3
20000600:	2240      	movs	r2, #64	; 0x40
20000602:	4313      	orrs	r3, r2
20000604:	b25b      	sxtb	r3, r3
20000606:	b2da      	uxtb	r2, r3
20000608:	251e      	movs	r5, #30
2000060a:	197b      	adds	r3, r7, r5
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0019      	movs	r1, r3
20000610:	0010      	movs	r0, r2
20000612:	f7ff feb7 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000616:	69bb      	ldr	r3, [r7, #24]
20000618:	b25b      	sxtb	r3, r3
2000061a:	2248      	movs	r2, #72	; 0x48
2000061c:	4252      	negs	r2, r2
2000061e:	4313      	orrs	r3, r2
20000620:	b25b      	sxtb	r3, r3
20000622:	b2da      	uxtb	r2, r3
20000624:	197b      	adds	r3, r7, r5
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	0019      	movs	r1, r3
2000062a:	0010      	movs	r0, r2
2000062c:	f7ff feaa 	bl	20000384 <graphic_write_command>
	c = graphic_read_data(controller);
20000630:	2317      	movs	r3, #23
20000632:	18fc      	adds	r4, r7, r3
20000634:	197b      	adds	r3, r7, r5
20000636:	781b      	ldrb	r3, [r3, #0]
20000638:	0018      	movs	r0, r3
2000063a:	f7ff fee9 	bl	20000410 <graphic_read_data>
2000063e:	0003      	movs	r3, r0
20000640:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000642:	68fb      	ldr	r3, [r7, #12]
20000644:	b25b      	sxtb	r3, r3
20000646:	2240      	movs	r2, #64	; 0x40
20000648:	4313      	orrs	r3, r2
2000064a:	b25b      	sxtb	r3, r3
2000064c:	b2da      	uxtb	r2, r3
2000064e:	197b      	adds	r3, r7, r5
20000650:	781b      	ldrb	r3, [r3, #0]
20000652:	0019      	movs	r1, r3
20000654:	0010      	movs	r0, r2
20000656:	f7ff fe95 	bl	20000384 <graphic_write_command>
	if(set){
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	2b00      	cmp	r3, #0
2000065e:	d009      	beq.n	20000674 <pixel+0x15a>
		mask = mask | c;
20000660:	221f      	movs	r2, #31
20000662:	18bb      	adds	r3, r7, r2
20000664:	18b9      	adds	r1, r7, r2
20000666:	2217      	movs	r2, #23
20000668:	18ba      	adds	r2, r7, r2
2000066a:	7809      	ldrb	r1, [r1, #0]
2000066c:	7812      	ldrb	r2, [r2, #0]
2000066e:	430a      	orrs	r2, r1
20000670:	701a      	strb	r2, [r3, #0]
20000672:	e008      	b.n	20000686 <pixel+0x16c>
	}
	else{
		mask = mask & c;
20000674:	221f      	movs	r2, #31
20000676:	18bb      	adds	r3, r7, r2
20000678:	18ba      	adds	r2, r7, r2
2000067a:	2117      	movs	r1, #23
2000067c:	1879      	adds	r1, r7, r1
2000067e:	7812      	ldrb	r2, [r2, #0]
20000680:	7809      	ldrb	r1, [r1, #0]
20000682:	400a      	ands	r2, r1
20000684:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000686:	231e      	movs	r3, #30
20000688:	18fb      	adds	r3, r7, r3
2000068a:	781a      	ldrb	r2, [r3, #0]
2000068c:	231f      	movs	r3, #31
2000068e:	18fb      	adds	r3, r7, r3
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	0011      	movs	r1, r2
20000694:	0018      	movs	r0, r3
20000696:	f7ff fe98 	bl	200003ca <graphic_write_data>
2000069a:	e000      	b.n	2000069e <pixel+0x184>
		return;
2000069c:	46c0      	nop			; (mov r8, r8)
}
2000069e:	46bd      	mov	sp, r7
200006a0:	b008      	add	sp, #32
200006a2:	bdb0      	pop	{r4, r5, r7, pc}
200006a4:	80000007 	andhi	r0, r0, r7
200006a8:	20000890 	mulcs	r0, r0, r8

200006ac <set_object_speed>:
	void (* clear) (struct tObj *);
	void (* move) (struct tObj *);
	void (* set_speed) (struct tObj *, int, int);
}OBJECT, *POBJECT;

void set_object_speed(POBJECT o, int speedx, int speedy){
200006ac:	b580      	push	{r7, lr}
200006ae:	b084      	sub	sp, #16
200006b0:	af00      	add	r7, sp, #0
200006b2:	60f8      	str	r0, [r7, #12]
200006b4:	60b9      	str	r1, [r7, #8]
200006b6:	607a      	str	r2, [r7, #4]
	 o->dirx = speedx;
200006b8:	68fb      	ldr	r3, [r7, #12]
200006ba:	68ba      	ldr	r2, [r7, #8]
200006bc:	605a      	str	r2, [r3, #4]
	 o->diry = speedy;
200006be:	68fb      	ldr	r3, [r7, #12]
200006c0:	687a      	ldr	r2, [r7, #4]
200006c2:	609a      	str	r2, [r3, #8]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b004      	add	sp, #16
200006ca:	bd80      	pop	{r7, pc}

200006cc <draw_object>:

void draw_object( POBJECT o ){
200006cc:	b580      	push	{r7, lr}
200006ce:	b084      	sub	sp, #16
200006d0:	af00      	add	r7, sp, #0
200006d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < sizeof(o->geo->px)/sizeof(o->geo->px[0]); i++){
200006d4:	2300      	movs	r3, #0
200006d6:	60fb      	str	r3, [r7, #12]
200006d8:	e01e      	b.n	20000718 <draw_object+0x4c>
		pixel(o->geo->px[i].x + o->posx, o->geo->px[i].y + o->posy, 1);
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	681a      	ldr	r2, [r3, #0]
200006de:	68fb      	ldr	r3, [r7, #12]
200006e0:	3304      	adds	r3, #4
200006e2:	005b      	lsls	r3, r3, #1
200006e4:	18d3      	adds	r3, r2, r3
200006e6:	3304      	adds	r3, #4
200006e8:	781b      	ldrb	r3, [r3, #0]
200006ea:	001a      	movs	r2, r3
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	68db      	ldr	r3, [r3, #12]
200006f0:	18d0      	adds	r0, r2, r3
200006f2:	687b      	ldr	r3, [r7, #4]
200006f4:	681a      	ldr	r2, [r3, #0]
200006f6:	68fb      	ldr	r3, [r7, #12]
200006f8:	3304      	adds	r3, #4
200006fa:	005b      	lsls	r3, r3, #1
200006fc:	18d3      	adds	r3, r2, r3
200006fe:	3305      	adds	r3, #5
20000700:	781b      	ldrb	r3, [r3, #0]
20000702:	001a      	movs	r2, r3
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	691b      	ldr	r3, [r3, #16]
20000708:	18d3      	adds	r3, r2, r3
2000070a:	2201      	movs	r2, #1
2000070c:	0019      	movs	r1, r3
2000070e:	f7ff ff04 	bl	2000051a <pixel>
	for(int i = 0; i < sizeof(o->geo->px)/sizeof(o->geo->px[0]); i++){
20000712:	68fb      	ldr	r3, [r7, #12]
20000714:	3301      	adds	r3, #1
20000716:	60fb      	str	r3, [r7, #12]
20000718:	68fb      	ldr	r3, [r7, #12]
2000071a:	2b13      	cmp	r3, #19
2000071c:	d9dd      	bls.n	200006da <draw_object+0xe>
	}
}
2000071e:	46c0      	nop			; (mov r8, r8)
20000720:	46bd      	mov	sp, r7
20000722:	b004      	add	sp, #16
20000724:	bd80      	pop	{r7, pc}

20000726 <clear_object>:

void clear_object( POBJECT o ){
20000726:	b580      	push	{r7, lr}
20000728:	b084      	sub	sp, #16
2000072a:	af00      	add	r7, sp, #0
2000072c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < sizeof(o->geo->px)/sizeof(o->geo->px[0]); i++){
2000072e:	2300      	movs	r3, #0
20000730:	60fb      	str	r3, [r7, #12]
20000732:	e01e      	b.n	20000772 <clear_object+0x4c>
		pixel(o->geo->px[i].x + o->posx, o->geo->px[i].y + o->posy, 0);
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	681a      	ldr	r2, [r3, #0]
20000738:	68fb      	ldr	r3, [r7, #12]
2000073a:	3304      	adds	r3, #4
2000073c:	005b      	lsls	r3, r3, #1
2000073e:	18d3      	adds	r3, r2, r3
20000740:	3304      	adds	r3, #4
20000742:	781b      	ldrb	r3, [r3, #0]
20000744:	001a      	movs	r2, r3
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	68db      	ldr	r3, [r3, #12]
2000074a:	18d0      	adds	r0, r2, r3
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	681a      	ldr	r2, [r3, #0]
20000750:	68fb      	ldr	r3, [r7, #12]
20000752:	3304      	adds	r3, #4
20000754:	005b      	lsls	r3, r3, #1
20000756:	18d3      	adds	r3, r2, r3
20000758:	3305      	adds	r3, #5
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	001a      	movs	r2, r3
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	691b      	ldr	r3, [r3, #16]
20000762:	18d3      	adds	r3, r2, r3
20000764:	2200      	movs	r2, #0
20000766:	0019      	movs	r1, r3
20000768:	f7ff fed7 	bl	2000051a <pixel>
	for(int i = 0; i < sizeof(o->geo->px)/sizeof(o->geo->px[0]); i++){
2000076c:	68fb      	ldr	r3, [r7, #12]
2000076e:	3301      	adds	r3, #1
20000770:	60fb      	str	r3, [r7, #12]
20000772:	68fb      	ldr	r3, [r7, #12]
20000774:	2b13      	cmp	r3, #19
20000776:	d9dd      	bls.n	20000734 <clear_object+0xe>
	}
}
20000778:	46c0      	nop			; (mov r8, r8)
2000077a:	46bd      	mov	sp, r7
2000077c:	b004      	add	sp, #16
2000077e:	bd80      	pop	{r7, pc}

20000780 <move_object>:

void move_object( POBJECT o ){
20000780:	b580      	push	{r7, lr}
20000782:	b082      	sub	sp, #8
20000784:	af00      	add	r7, sp, #0
20000786:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	0018      	movs	r0, r3
2000078c:	f7ff ffcb 	bl	20000726 <clear_object>
	o->posx = o->posx + o->dirx;
20000790:	687b      	ldr	r3, [r7, #4]
20000792:	68da      	ldr	r2, [r3, #12]
20000794:	687b      	ldr	r3, [r7, #4]
20000796:	685b      	ldr	r3, [r3, #4]
20000798:	18d2      	adds	r2, r2, r3
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
2000079e:	687b      	ldr	r3, [r7, #4]
200007a0:	691a      	ldr	r2, [r3, #16]
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	689b      	ldr	r3, [r3, #8]
200007a6:	18d2      	adds	r2, r2, r3
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	611a      	str	r2, [r3, #16]
	if(o->posx < 1){
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	68db      	ldr	r3, [r3, #12]
200007b0:	2b00      	cmp	r3, #0
200007b2:	dc04      	bgt.n	200007be <move_object+0x3e>
		o->dirx = -o->dirx;
200007b4:	687b      	ldr	r3, [r7, #4]
200007b6:	685b      	ldr	r3, [r3, #4]
200007b8:	425a      	negs	r2, r3
200007ba:	687b      	ldr	r3, [r7, #4]
200007bc:	605a      	str	r2, [r3, #4]
	}
	if(o->posx > 128){
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	68db      	ldr	r3, [r3, #12]
200007c2:	2b80      	cmp	r3, #128	; 0x80
200007c4:	dd04      	ble.n	200007d0 <move_object+0x50>
		o->dirx = -o->dirx;
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	685b      	ldr	r3, [r3, #4]
200007ca:	425a      	negs	r2, r3
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	605a      	str	r2, [r3, #4]
	}
	if(o->diry < 1){
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	689b      	ldr	r3, [r3, #8]
200007d4:	2b00      	cmp	r3, #0
200007d6:	dc04      	bgt.n	200007e2 <move_object+0x62>
		o->diry = -o->diry;
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	689b      	ldr	r3, [r3, #8]
200007dc:	425a      	negs	r2, r3
200007de:	687b      	ldr	r3, [r7, #4]
200007e0:	609a      	str	r2, [r3, #8]
	}
	if(o->diry > 64){
200007e2:	687b      	ldr	r3, [r7, #4]
200007e4:	689b      	ldr	r3, [r3, #8]
200007e6:	2b40      	cmp	r3, #64	; 0x40
200007e8:	dd04      	ble.n	200007f4 <move_object+0x74>
		o->diry = -o->diry;
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	689b      	ldr	r3, [r3, #8]
200007ee:	425a      	negs	r2, r3
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	609a      	str	r2, [r3, #8]
	}
	draw_object(o);
200007f4:	687b      	ldr	r3, [r7, #4]
200007f6:	0018      	movs	r0, r3
200007f8:	f7ff ff68 	bl	200006cc <draw_object>
}
200007fc:	46c0      	nop			; (mov r8, r8)
200007fe:	46bd      	mov	sp, r7
20000800:	b002      	add	sp, #8
20000802:	bd80      	pop	{r7, pc}

20000804 <main>:
	move_object,
	set_object_speed
};

int main(int argc, char **argv)
{
20000804:	b580      	push	{r7, lr}
20000806:	b084      	sub	sp, #16
20000808:	af00      	add	r7, sp, #0
2000080a:	6078      	str	r0, [r7, #4]
2000080c:	6039      	str	r1, [r7, #0]
	POBJECT p = &ball;
2000080e:	4b09      	ldr	r3, [pc, #36]	; (20000834 <main+0x30>)
20000810:	60fb      	str	r3, [r7, #12]
	init_app();
20000812:	f7ff fe12 	bl	2000043a <init_app>
	//graphic_initialize();
#ifdef SIMULATOR
	graphic_clear_screen();
#endif
	p->set_speed( p, 40, 1);
20000816:	68fb      	ldr	r3, [r7, #12]
20000818:	6a1b      	ldr	r3, [r3, #32]
2000081a:	68f8      	ldr	r0, [r7, #12]
2000081c:	2201      	movs	r2, #1
2000081e:	2128      	movs	r1, #40	; 0x28
20000820:	4798      	blx	r3
	while(1){
		p->move( p );
20000822:	68fb      	ldr	r3, [r7, #12]
20000824:	69db      	ldr	r3, [r3, #28]
20000826:	68fa      	ldr	r2, [r7, #12]
20000828:	0010      	movs	r0, r2
2000082a:	4798      	blx	r3
		delay_milli(1);
2000082c:	2001      	movs	r0, #1
2000082e:	f7ff fc44 	bl	200000ba <delay_milli>
		p->move( p );
20000832:	e7f6      	b.n	20000822 <main+0x1e>
20000834:	2000086c 	andcs	r0, r0, ip, ror #16

20000838 <ball_geometry>:
20000838:	0000000c 	andeq	r0, r0, ip
2000083c:	00000004 	andeq	r0, r0, r4
20000840:	00000004 	andeq	r0, r0, r4
20000844:	02000100 	andeq	r0, r0, #0, 2
20000848:	01010001 	tsteq	r1, r1
2000084c:	03010201 	movweq	r0, #4609	; 0x1201
20000850:	01020002 	tsteq	r2, r2
20000854:	03020202 	movweq	r0, #8706	; 0x2202
20000858:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000086c <ball>:
2000086c:	20000838 	andcs	r0, r0, r8, lsr r8
	...
20000878:	00000001 	andeq	r0, r0, r1
2000087c:	00000001 	andeq	r0, r0, r1
20000880:	200006cd 	andcs	r0, r0, sp, asr #13
20000884:	20000727 	andcs	r0, r0, r7, lsr #14
20000888:	20000781 	andcs	r0, r0, r1, lsl #15
2000088c:	200006ad 	andcs	r0, r0, sp, lsr #13
20000890:	20000576 	andcs	r0, r0, r6, ror r5
20000894:	20000580 	andcs	r0, r0, r0, lsl #11
20000898:	2000058a 	andcs	r0, r0, sl, lsl #11
2000089c:	20000594 	mulcs	r0, r4, r5
200008a0:	2000059e 	mulcs	r0, lr, r5
200008a4:	200005a8 	andcs	r0, r0, r8, lsr #11
200008a8:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
200008ac:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000626 	andeq	r0, r0, r6, lsr #12
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000b3 	strheq	r0, [r0], -r3
  10:	00004d0c 	andeq	r4, r0, ip, lsl #26
  14:	0001b400 	andeq	fp, r1, r0, lsl #8
	...
  24:	02420200 	subeq	r0, r2, #0, 4
  28:	54010000 	strpl	r0, [r1], #-0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	64080103 	strvs	r0, [r8], #-259	; 0xfffffefd
  34:	04000001 	streq	r0, [r0], #-1
  38:	00000157 	andeq	r0, r0, r7, asr r1
  3c:	01200102 			; <UNDEFINED> instruction: 0x01200102
  40:	0000005b 	andeq	r0, r0, fp, asr r0
  44:	01007805 	tsteq	r0, r5, lsl #16
  48:	00300121 	eorseq	r0, r0, r1, lsr #2
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	22010079 	andcs	r0, r1, #121	; 0x79
  54:	00003001 	andeq	r3, r0, r1
  58:	06000100 	streq	r0, [r0], -r0, lsl #2
  5c:	0000015e 	andeq	r0, r0, lr, asr r1
  60:	37012301 	strcc	r2, [r1, -r1, lsl #6]
  64:	04000000 	streq	r0, [r0], #-0
  68:	00000238 	andeq	r0, r0, r8, lsr r2
  6c:	01250134 			; <UNDEFINED> instruction: 0x01250134
  70:	000000a8 	andeq	r0, r0, r8, lsr #1
  74:	00030b07 	andeq	r0, r3, r7, lsl #22
  78:	01260100 			; <UNDEFINED> instruction: 0x01260100
  7c:	000000a8 	andeq	r0, r0, r8, lsr #1
  80:	024a0700 	subeq	r0, sl, #0, 14
  84:	27010000 	strcs	r0, [r1, -r0]
  88:	0000a801 	andeq	sl, r0, r1, lsl #16
  8c:	50070400 	andpl	r0, r7, r0, lsl #8
  90:	01000002 	tsteq	r0, r2
  94:	00a80128 	adceq	r0, r8, r8, lsr #2
  98:	05080000 	streq	r0, [r8, #-0]
  9c:	01007870 	tsteq	r0, r0, ror r8
  a0:	00af0129 	adceq	r0, pc, r9, lsr #2
  a4:	000c0000 	andeq	r0, ip, r0
  a8:	69050408 	stmdbvs	r5, {r3, sl}
  ac:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  b0:	0000005b 	andeq	r0, r0, fp, asr r0
  b4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
  b8:	0000bf0a 	andeq	fp, r0, sl, lsl #30
  bc:	03001300 	movweq	r1, #768	; 0x300
  c0:	022b0704 	eoreq	r0, fp, #4, 14	; 0x100000
  c4:	01060000 	mrseq	r0, (UNDEF: 6)
  c8:	01000000 	mrseq	r0, (UNDEF: 0)
  cc:	0067012a 	rsbeq	r0, r7, sl, lsr #2
  d0:	00060000 	andeq	r0, r6, r0
  d4:	01000000 	mrseq	r0, (UNDEF: 0)
  d8:	00de012a 	sbcseq	r0, lr, sl, lsr #2
  dc:	040b0000 	streq	r0, [fp], #-0
  e0:	00000067 	andeq	r0, r0, r7, rrx
  e4:	0001860c 	andeq	r8, r1, ip, lsl #12
  e8:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
  ec:	000000c6 	andeq	r0, r0, r6, asr #1
  f0:	08380305 	ldmdaeq	r8!, {r0, r2, r8, r9}
  f4:	ed042000 	stc	0, cr2, [r4, #-0]
  f8:	24000002 	strcs	r0, [r0], #-2
  fc:	79013901 	stmdbvc	r1, {r0, r8, fp, ip, sp}
 100:	05000001 	streq	r0, [r0, #-1]
 104:	006f6567 	rsbeq	r6, pc, r7, ror #10
 108:	d2013a01 	andle	r3, r1, #4096	; 0x1000
 10c:	00000000 	andeq	r0, r0, r0
 110:	0001ee07 	andeq	lr, r1, r7, lsl #28
 114:	013b0100 	teqeq	fp, r0, lsl #2
 118:	000000a8 	andeq	r0, r0, r8, lsr #1
 11c:	00910704 	addseq	r0, r1, r4, lsl #14
 120:	3b010000 	blcc	40128 <startup-0x1ffbfed8>
 124:	0000a801 	andeq	sl, r0, r1, lsl #16
 128:	7c070800 	stcvc	8, cr0, [r7], {-0}
 12c:	01000001 	tsteq	r0, r1
 130:	00a8013c 	adceq	r0, r8, ip, lsr r1
 134:	070c0000 	streq	r0, [ip, -r0]
 138:	00000181 	andeq	r0, r0, r1, lsl #3
 13c:	a8013c01 	stmdage	r1, {r0, sl, fp, ip, sp}
 140:	10000000 	andne	r0, r0, r0
 144:	00026c07 	andeq	r6, r2, r7, lsl #24
 148:	013d0100 	teqeq	sp, r0, lsl #2
 14c:	0000018a 	andeq	r0, r0, sl, lsl #3
 150:	02170714 	andseq	r0, r7, #20, 14	; 0x500000
 154:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 158:	00018a01 	andeq	r8, r1, r1, lsl #20
 15c:	43071800 	movwmi	r1, #30720	; 0x7800
 160:	01000000 	mrseq	r0, (UNDEF: 0)
 164:	018a013f 	orreq	r0, sl, pc, lsr r1
 168:	071c0000 	ldreq	r0, [ip, -r0]
 16c:	00000172 	andeq	r0, r0, r2, ror r1
 170:	a5014001 	strge	r4, [r1, #-1]
 174:	20000001 	andcs	r0, r0, r1
 178:	01840d00 	orreq	r0, r4, r0, lsl #26
 17c:	840e0000 	strhi	r0, [lr], #-0
 180:	00000001 	andeq	r0, r0, r1
 184:	00f6040b 	rscseq	r0, r6, fp, lsl #8
 188:	040b0000 	streq	r0, [fp], #-0
 18c:	00000179 	andeq	r0, r0, r9, ror r1
 190:	0001a50d 	andeq	sl, r1, sp, lsl #10
 194:	01840e00 	orreq	r0, r4, r0, lsl #28
 198:	a80e0000 	stmdage	lr, {}	; <UNPREDICTABLE>
 19c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 1a0:	000000a8 	andeq	r0, r0, r8, lsr #1
 1a4:	90040b00 	andls	r0, r4, r0, lsl #22
 1a8:	06000001 	streq	r0, [r0], -r1
 1ac:	00000330 	andeq	r0, r0, r0, lsr r3
 1b0:	f6014101 			; <UNDEFINED> instruction: 0xf6014101
 1b4:	06000000 	streq	r0, [r0], -r0
 1b8:	0000032f 	andeq	r0, r0, pc, lsr #6
 1bc:	84014101 	strhi	r4, [r1], #-257	; 0xfffffeff
 1c0:	0f000001 	svceq	0x00000001
 1c4:	00000267 	andeq	r0, r0, r7, ror #4
 1c8:	ab016701 	blge	59dd4 <startup-0x1ffa622c>
 1cc:	05000001 	streq	r0, [r0, #-1]
 1d0:	00086c03 	andeq	r6, r8, r3, lsl #24
 1d4:	021d1020 	andseq	r1, sp, #32
 1d8:	72010000 	andvc	r0, r1, #0
 1dc:	0000a801 	andeq	sl, r0, r1, lsl #16
 1e0:	00080400 	andeq	r0, r8, r0, lsl #8
 1e4:	00003420 	andeq	r3, r0, r0, lsr #8
 1e8:	1b9c0100 	blne	fe7005f0 <ball+0xde6ffd84>
 1ec:	11000002 	tstne	r0, r2
 1f0:	00000262 	andeq	r0, r0, r2, ror #4
 1f4:	a8017201 	stmdage	r1, {r0, r9, ip, sp, lr}
 1f8:	02000000 	andeq	r0, r0, #0
 1fc:	48116c91 	ldmdami	r1, {r0, r4, r7, sl, fp, sp, lr}
 200:	01000000 	mrseq	r0, (UNDEF: 0)
 204:	021b0172 	andseq	r0, fp, #-2147483620	; 0x8000001c
 208:	91020000 	mrsls	r0, (UNDEF: 2)
 20c:	00701268 	rsbseq	r1, r0, r8, ror #4
 210:	b7017401 	strlt	r7, [r1, -r1, lsl #8]
 214:	02000001 	andeq	r0, r0, #1
 218:	0b007491 	bleq	1d464 <startup-0x1ffe2b9c>
 21c:	00022104 	andeq	r2, r2, r4, lsl #2
 220:	27040b00 	strcs	r0, [r4, -r0, lsl #22]
 224:	03000002 	movweq	r0, #2
 228:	016d0801 	cmneq	sp, r1, lsl #16
 22c:	15130000 	ldrne	r0, [r3, #-0]
 230:	01000003 	tsteq	r0, r3
 234:	07800154 			; <UNDEFINED> instruction: 0x07800154
 238:	00842000 	addeq	r2, r4, r0
 23c:	9c010000 	stcls	0, cr0, [r1], {-0}
 240:	00000252 	andeq	r0, r0, r2, asr r2
 244:	01006f14 	tsteq	r0, r4, lsl pc
 248:	01b70154 			; <UNDEFINED> instruction: 0x01b70154
 24c:	91020000 	mrsls	r0, (UNDEF: 2)
 250:	d4130074 	ldrle	r0, [r3], #-116	; 0xffffff8c
 254:	01000002 	tsteq	r0, r2
 258:	0726014e 	streq	r0, [r6, -lr, asr #2]!
 25c:	005a2000 	subseq	r2, sl, r0
 260:	9c010000 	stcls	0, cr0, [r1], {-0}
 264:	0000028d 	andeq	r0, r0, sp, lsl #5
 268:	01006f14 	tsteq	r0, r4, lsl pc
 26c:	01b7014e 			; <UNDEFINED> instruction: 0x01b7014e
 270:	91020000 	mrsls	r0, (UNDEF: 2)
 274:	072e156c 	streq	r1, [lr, -ip, ror #10]!
 278:	004a2000 	subeq	r2, sl, r0
 27c:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
 280:	014f0100 	mrseq	r0, (UNDEF: 95)
 284:	000000a8 	andeq	r0, r0, r8, lsr #1
 288:	00749102 	rsbseq	r9, r4, r2, lsl #2
 28c:	02f21300 	rscseq	r1, r2, #0, 6
 290:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 294:	0006cc01 	andeq	ip, r6, r1, lsl #24
 298:	00005a20 	andeq	r5, r0, r0, lsr #20
 29c:	c89c0100 	ldmgt	ip, {r8}
 2a0:	14000002 	strne	r0, [r0], #-2
 2a4:	4801006f 	stmdami	r1, {r0, r1, r2, r3, r5, r6}
 2a8:	0001b701 	andeq	fp, r1, r1, lsl #14
 2ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2b0:	0006d415 	andeq	sp, r6, r5, lsl r4
 2b4:	00004a20 	andeq	r4, r0, r0, lsr #20
 2b8:	00691200 	rsbeq	r1, r9, r0, lsl #4
 2bc:	a8014901 	stmdage	r1, {r0, r8, fp, lr}
 2c0:	02000000 	andeq	r0, r0, #0
 2c4:	00007491 	muleq	r0, r1, r4
 2c8:	00029b16 	andeq	r9, r2, r6, lsl fp
 2cc:	01430100 	mrseq	r0, (UNDEF: 83)
 2d0:	200006ac 	andcs	r0, r0, ip, lsr #13
 2d4:	00000020 	andeq	r0, r0, r0, lsr #32
 2d8:	030a9c01 	movweq	r9, #44033	; 0xac01
 2dc:	6f140000 	svcvs	0x00140000
 2e0:	01430100 	mrseq	r0, (UNDEF: 83)
 2e4:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 2e8:	11749102 	cmnne	r4, r2, lsl #2
 2ec:	00000321 	andeq	r0, r0, r1, lsr #6
 2f0:	a8014301 	stmdage	r1, {r0, r8, r9, lr}
 2f4:	02000000 	andeq	r0, r0, #0
 2f8:	28117091 	ldmdacs	r1, {r0, r4, r7, ip, sp, lr}
 2fc:	01000003 	tsteq	r0, r3
 300:	00a80143 	adceq	r0, r8, r3, asr #2
 304:	91020000 	mrsls	r0, (UNDEF: 2)
 308:	9617006c 	ldrls	r0, [r7], -ip, rrx
 30c:	01000000 	mrseq	r0, (UNDEF: 0)
 310:	00051af1 	strdeq	r1, [r5], -r1	; <UNPREDICTABLE>
 314:	00019220 	andeq	r9, r1, r0, lsr #4
 318:	7c9c0100 	ldfvcs	f0, [ip], {0}
 31c:	18000003 	stmdane	r0, {r0, r1}
 320:	f1010078 	setend	le
 324:	000000a8 	andeq	r0, r0, r8, lsr #1
 328:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
 32c:	f1010079 	setend	le
 330:	000000a8 	andeq	r0, r0, r8, lsr #1
 334:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
 338:	00746573 	rsbseq	r6, r4, r3, ror r5
 33c:	00a8f101 	adceq	pc, r8, r1, lsl #2
 340:	91020000 	mrsls	r0, (UNDEF: 2)
 344:	02711954 	rsbseq	r1, r1, #84, 18	; 0x150000
 348:	f2010000 	vhadd.s8	d0, d1, d0
 34c:	00000025 	andeq	r0, r0, r5, lsr #32
 350:	1a6f9102 	bne	1be4760 <startup-0x1e41b8a0>
 354:	f2010063 	vhadd.s8	q0, <illegal reg q0.5>, <illegal reg q9.5>
 358:	00000025 	andeq	r0, r0, r5, lsr #32
 35c:	19679102 	stmdbne	r7!, {r1, r8, ip, pc}^
 360:	000001a9 	andeq	r0, r0, r9, lsr #3
 364:	0025f201 	eoreq	pc, r5, r1, lsl #4
 368:	91020000 	mrsls	r0, (UNDEF: 2)
 36c:	0276196e 	rsbseq	r1, r6, #1802240	; 0x1b8000
 370:	f3010000 	vhadd.u8	d0, d1, d0
 374:	000000a8 	andeq	r0, r0, r8, lsr #1
 378:	00689102 	rsbeq	r9, r8, r2, lsl #2
 37c:	0002bf17 	andeq	fp, r2, r7, lsl pc
 380:	c2e70100 	rscgt	r0, r7, #0, 2
 384:	58200004 	stmdapl	r0!, {r2}
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	0003c29c 	muleq	r3, ip, r2
 390:	04c81500 	strbeq	r1, [r8], #1280	; 0x500
 394:	004a2000 	subeq	r2, sl, r0
 398:	ae190000 	cdpge	0, 1, cr0, cr9, cr0, {0}
 39c:	01000000 	mrseq	r0, (UNDEF: 0)
 3a0:	0000a8e8 	andeq	sl, r0, r8, ror #17
 3a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 3a8:	0004ec15 	andeq	lr, r4, r5, lsl ip
 3ac:	00001a20 	andeq	r1, r0, r0, lsr #20
 3b0:	64611a00 	strbtvs	r1, [r1], #-2560	; 0xfffff600
 3b4:	eb010064 	bl	4054c <startup-0x1ffbfab4>
 3b8:	000000a8 	andeq	r0, r0, r8, lsr #1
 3bc:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3c0:	f31b0000 	vhadd.u16	d0, d11, d0
 3c4:	01000001 	tsteq	r0, r1
 3c8:	000454d5 	ldrdeq	r5, [r4], -r5	; <UNPREDICTABLE>
 3cc:	00006e20 	andeq	r6, r0, r0, lsr #28
 3d0:	1c9c0100 	ldfnes	f0, [ip], {0}
 3d4:	00000222 	andeq	r0, r0, r2, lsr #4
 3d8:	043ad101 	ldrteq	sp, [sl], #-257	; 0xfffffeff
 3dc:	001a2000 	andseq	r2, sl, r0
 3e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3e4:	00009c1d 	andeq	r9, r0, sp, lsl ip
 3e8:	25cc0100 	strbcs	r0, [ip, #256]	; 0x100
 3ec:	10000000 	andne	r0, r0, r0
 3f0:	2a200004 	bcs	800408 <startup-0x1f7ffbf8>
 3f4:	01000000 	mrseq	r0, (UNDEF: 0)
 3f8:	00040c9c 	muleq	r4, ip, ip
 3fc:	01a91e00 			; <UNDEFINED> instruction: 0x01a91e00
 400:	cc010000 	stcgt	0, cr0, [r1], {-0}
 404:	00000025 	andeq	r0, r0, r5, lsr #32
 408:	00779102 	rsbseq	r9, r7, r2, lsl #2
 40c:	00028817 	andeq	r8, r2, r7, lsl r8
 410:	cac40100 	bgt	ff100818 <ball+0xdf0fffac>
 414:	46200003 	strtmi	r0, [r0], -r3
 418:	01000000 	mrseq	r0, (UNDEF: 0)
 41c:	00043e9c 	muleq	r4, ip, lr
 420:	00a91e00 	adceq	r1, r9, r0, lsl #28
 424:	c4010000 	strgt	r0, [r1], #-0
 428:	00000025 	andeq	r0, r0, r5, lsr #32
 42c:	1e779102 	expnes	f1, f2
 430:	000001a9 	andeq	r0, r0, r9, lsr #3
 434:	0025c401 	eoreq	ip, r5, r1, lsl #8
 438:	91020000 	mrsls	r0, (UNDEF: 2)
 43c:	27170076 			; <UNDEFINED> instruction: 0x27170076
 440:	01000000 	mrseq	r0, (UNDEF: 0)
 444:	000384bc 			; <UNDEFINED> instruction: 0x000384bc
 448:	00004620 	andeq	r4, r0, r0, lsr #12
 44c:	709c0100 	addsvc	r0, ip, r0, lsl #2
 450:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
 454:	00000035 	andeq	r0, r0, r5, lsr r0
 458:	0025bc01 	eoreq	fp, r5, r1, lsl #24
 45c:	91020000 	mrsls	r0, (UNDEF: 2)
 460:	01a91e77 			; <UNDEFINED> instruction: 0x01a91e77
 464:	bc010000 	stclt	0, cr0, [r1], {-0}
 468:	00000025 	andeq	r0, r0, r5, lsr #32
 46c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 470:	00019417 	andeq	r9, r1, r7, lsl r4
 474:	08a60100 	stmiaeq	r6!, {r8}
 478:	7c200003 	stcvc	0, cr0, [r0], #-12
 47c:	01000000 	mrseq	r0, (UNDEF: 0)
 480:	0004a29c 	muleq	r4, ip, r2
 484:	003d1e00 	eorseq	r1, sp, r0, lsl #28
 488:	a6010000 	strge	r0, [r1], -r0
 48c:	00000025 	andeq	r0, r0, r5, lsr #32
 490:	1e779102 	expnes	f1, f2
 494:	000001a9 	andeq	r0, r0, r9, lsr #3
 498:	0025a601 	eoreq	sl, r5, r1, lsl #12
 49c:	91020000 	mrsls	r0, (UNDEF: 2)
 4a0:	fe1d0076 	mrc2	0, 0, r0, cr13, cr6, {3}
 4a4:	01000002 	tsteq	r0, r2
 4a8:	0000258e 	andeq	r2, r0, lr, lsl #11
 4ac:	00027400 	andeq	r7, r2, r0, lsl #8
 4b0:	00009420 	andeq	r9, r0, r0, lsr #8
 4b4:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
 4b8:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
 4bc:	000001a9 	andeq	r0, r0, r9, lsr #3
 4c0:	00258e01 	eoreq	r8, r5, r1, lsl #28
 4c4:	91020000 	mrsls	r0, (UNDEF: 2)
 4c8:	00631a6f 	rsbeq	r1, r3, pc, ror #20
 4cc:	00258f01 	eoreq	r8, r5, r1, lsl #30
 4d0:	91020000 	mrsls	r0, (UNDEF: 2)
 4d4:	ac170077 	ldcge	0, cr0, [r7], {119}	; 0x77
 4d8:	01000002 	tsteq	r0, r2
 4dc:	0002007c 	andeq	r0, r2, ip, ror r0
 4e0:	00007420 	andeq	r7, r0, r0, lsr #8
 4e4:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
 4e8:	1a000004 	bne	500 <startup-0x1ffffb00>
 4ec:	7d010063 	stcvc	0, cr0, [r1, #-396]	; 0xfffffe74
 4f0:	00000025 	andeq	r0, r0, r5, lsr #32
 4f4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4f8:	0001a217 	andeq	sl, r1, r7, lsl r2
 4fc:	a0680100 	rsbge	r0, r8, r0, lsl #2
 500:	60200001 	eorvs	r0, r0, r1
 504:	01000000 	mrseq	r0, (UNDEF: 0)
 508:	00051c9c 	muleq	r5, ip, ip
 50c:	01a91e00 			; <UNDEFINED> instruction: 0x01a91e00
 510:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 514:	00000025 	andeq	r0, r0, r5, lsr #32
 518:	00779102 	rsbseq	r9, r7, r2, lsl #2
 51c:	0002061f 	andeq	r0, r2, pc, lsl r6
 520:	505f0100 	subspl	r0, pc, r0, lsl #2
 524:	50200001 	eorpl	r0, r0, r1
 528:	01000000 	mrseq	r0, (UNDEF: 0)
 52c:	00054a9c 	muleq	r5, ip, sl
 530:	00781800 	rsbseq	r1, r8, r0, lsl #16
 534:	00255f01 	eoreq	r5, r5, r1, lsl #30
 538:	91020000 	mrsls	r0, (UNDEF: 2)
 53c:	00631a6f 	rsbeq	r1, r3, pc, ror #20
 540:	00256001 	eoreq	r6, r5, r1
 544:	91020000 	mrsls	r0, (UNDEF: 2)
 548:	121f0077 	andsne	r0, pc, #119	; 0x77
 54c:	01000000 	mrseq	r0, (UNDEF: 0)
 550:	00010056 	andeq	r0, r1, r6, asr r0
 554:	00005020 	andeq	r5, r0, r0, lsr #32
 558:	789c0100 	ldmvc	ip, {r8}
 55c:	18000005 	stmdane	r0, {r0, r2}
 560:	56010078 			; <UNDEFINED> instruction: 0x56010078
 564:	00000025 	andeq	r0, r0, r5, lsr #32
 568:	1a6f9102 	bne	1be4978 <startup-0x1e41b688>
 56c:	57010063 	strpl	r0, [r1, -r3, rrx]
 570:	00000025 	andeq	r0, r0, r5, lsr #32
 574:	00779102 	rsbseq	r9, r7, r2, lsl #2
 578:	00027c17 	andeq	r7, r2, r7, lsl ip
 57c:	ba480100 	blt	1200984 <startup-0x1edff67c>
 580:	46200000 	strtmi	r0, [r0], -r0
 584:	01000000 	mrseq	r0, (UNDEF: 0)
 588:	0005a79c 	muleq	r5, ip, r7
 58c:	736d1800 	cmnvc	sp, #0, 16
 590:	bf480100 	svclt	0x00480100
 594:	02000000 	andeq	r0, r0, #0
 598:	691a6c91 	ldmdbvs	sl, {r0, r4, r7, sl, fp, sp, lr}
 59c:	a8490100 	stmdage	r9, {r8}^
 5a0:	02000000 	andeq	r0, r0, #0
 5a4:	17007491 			; <UNDEFINED> instruction: 0x17007491
 5a8:	0000014b 	andeq	r0, r0, fp, asr #2
 5ac:	00803f01 	addeq	r3, r0, r1, lsl #30
 5b0:	003a2000 	eorseq	r2, sl, r0
 5b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5b8:	000005f6 	strdeq	r0, [r0], -r6
 5bc:	00737518 	rsbseq	r7, r3, r8, lsl r5
 5c0:	00bf3f01 	adcseq	r3, pc, r1, lsl #30
 5c4:	91020000 	mrsls	r0, (UNDEF: 2)
 5c8:	0088156c 	addeq	r1, r8, ip, ror #10
 5cc:	002a2000 	eoreq	r2, sl, r0
 5d0:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
 5d4:	a8400100 	stmdage	r0, {r8}^
 5d8:	02000000 	andeq	r0, r0, #0
 5dc:	8e157491 	cfcmpshi	r7, mvf5, mvf1
 5e0:	16200000 	strtne	r0, [r0], -r0
 5e4:	1a000000 	bne	5ec <startup-0x1ffffa14>
 5e8:	4101006a 	tstmi	r1, sl, rrx
 5ec:	000000a8 	andeq	r0, r0, r8, lsr #1
 5f0:	00709102 	rsbseq	r9, r0, r2, lsl #2
 5f4:	e1200000 			; <UNDEFINED> instruction: 0xe1200000
 5f8:	01000002 	tsteq	r0, r2
 5fc:	00004835 	andeq	r4, r0, r5, lsr r8
 600:	00003820 	andeq	r3, r0, r0, lsr #16
 604:	209c0100 	addscs	r0, ip, r0, lsl #2
 608:	00000256 	andeq	r0, r0, r6, asr r2
 60c:	00102c01 	andseq	r2, r0, r1, lsl #24
 610:	00382000 	eorseq	r2, r8, r0
 614:	9c010000 	stcls	0, cr0, [r1], {-0}
 618:	00000a20 	andeq	r0, r0, r0, lsr #20
 61c:	00090100 	andeq	r0, r9, r0, lsl #2
 620:	0c200000 	stceq	0, cr0, [r0], #-0
 624:	01000000 	mrseq	r0, (UNDEF: 0)
 628:	Address 0x00000628 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  30:	0b3a0b0b 	bleq	e82c64 <startup-0x1f17d39c>
  34:	1301053b 	movwne	r0, #5435	; 0x153b
  38:	0d050000 	stceq	0, cr0, [r5, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	000b3813 	andeq	r3, fp, r3, lsl r8
  48:	00160600 	andseq	r0, r6, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	1349053b 	movtne	r0, #38203	; 0x953b
  54:	0d070000 	stceq	0, cr0, [r7, #-0]
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	000b3813 	andeq	r3, fp, r3, lsl r8
  64:	00240800 	eoreq	r0, r4, r0, lsl #16
  68:	0b3e0b0b 	bleq	f82c9c <startup-0x1f07d364>
  6c:	00000803 	andeq	r0, r0, r3, lsl #16
  70:	49010109 	stmdbmi	r1, {r0, r3, r8}
  74:	00130113 	andseq	r0, r3, r3, lsl r1
  78:	00210a00 	eoreq	r0, r1, r0, lsl #20
  7c:	0b2f1349 	bleq	bc4da8 <startup-0x1f43b258>
  80:	0f0b0000 	svceq	0x000b0000
  84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  88:	0c000013 	stceq	0, cr0, [r0], {19}
  8c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  94:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  98:	00001802 	andeq	r1, r0, r2, lsl #16
  9c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
  a0:	00130119 	andseq	r0, r3, r9, lsl r1
  a4:	00050e00 	andeq	r0, r5, r0, lsl #28
  a8:	00001349 	andeq	r1, r0, r9, asr #6
  ac:	0300340f 	movweq	r3, #1039	; 0x40f
  b0:	3b0b3a0e 	blcc	2ce8f0 <startup-0x1fd31710>
  b4:	02134905 	andseq	r4, r3, #81920	; 0x14000
  b8:	10000018 	andne	r0, r0, r8, lsl r0
  bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  c8:	01111349 	tsteq	r1, r9, asr #6
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d4:	11000013 	tstne	r0, r3, lsl r0
  d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e4:	34120000 	ldrcc	r0, [r2], #-0
  e8:	3a080300 	bcc	200cf0 <startup-0x1fdff310>
  ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	00180213 	andseq	r0, r8, r3, lsl r2
  f4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
  f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 100:	01111927 	tsteq	r1, r7, lsr #18
 104:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 108:	01194296 			; <UNDEFINED> instruction: 0x01194296
 10c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 110:	08030005 	stmdaeq	r3, {r0, r2}
 114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 118:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 11c:	0b150000 	bleq	540124 <startup-0x1fabfedc>
 120:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 124:	16000006 	strne	r0, [r0], -r6
 128:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 134:	06120111 			; <UNDEFINED> instruction: 0x06120111
 138:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 13c:	00130119 	andseq	r0, r3, r9, lsl r1
 140:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 144:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 148:	0b3b0b3a 	bleq	ec2e38 <startup-0x1f13d1c8>
 14c:	01111927 	tsteq	r1, r7, lsr #18
 150:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 154:	01194296 			; <UNDEFINED> instruction: 0x01194296
 158:	18000013 	stmdane	r0, {r0, r1, r4}
 15c:	08030005 	stmdaeq	r3, {r0, r2}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 168:	34190000 	ldrcc	r0, [r9], #-0
 16c:	3a0e0300 	bcc	380d74 <startup-0x1fc7f28c>
 170:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	00180213 	andseq	r0, r8, r3, lsl r2
 178:	00341a00 	eorseq	r1, r4, r0, lsl #20
 17c:	0b3a0803 	bleq	e82190 <startup-0x1f17de70>
 180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 184:	00001802 	andeq	r1, r0, r2, lsl #16
 188:	3f002e1b 	svccc	0x00002e1b
 18c:	3a0e0319 	bcc	380df8 <startup-0x1fc7f208>
 190:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 194:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 198:	96184006 	ldrls	r4, [r8], -r6
 19c:	00001942 	andeq	r1, r0, r2, asr #18
 1a0:	3f002e1c 	svccc	0x00002e1c
 1a4:	3a0e0319 	bcc	380e10 <startup-0x1fc7f1f0>
 1a8:	110b3b0b 	tstne	fp, fp, lsl #22
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1b8:	03193f01 	tsteq	r9, #1, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	051e0000 	ldreq	r0, [lr, #-0]
 1d4:	3a0e0300 	bcc	380ddc <startup-0x1fc7f224>
 1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	00180213 	andseq	r0, r8, r3, lsl r2
 1e0:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1f8:	20000013 	andcs	r0, r0, r3, lsl r0
 1fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 208:	06120111 			; <UNDEFINED> instruction: 0x06120111
 20c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 210:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000828 	andeq	r0, r0, r8, lsr #16
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000838 	andcs	r0, r0, r8, lsr r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001fd 	strdeq	r0, [r0], -sp
   4:	005a0002 	subseq	r0, sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c695f66 	stclvs	15, cr5, [r9], #-408	; 0xfffffe68
  28:	6e4f2f6c 	cdpvs	15, 4, cr2, cr15, cr12, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
  34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  38:	2f746e65 	svccs	0x00746e65
  3c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  40:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  44:	6f697461 	svcvs	0x00697461
  48:	2f72656e 	svccs	0x0072656e
  4c:	6f747561 	svcvs	0x00747561
  50:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	00000001 	andeq	r0, r0, r1
  64:	00020500 	andeq	r0, r2, r0, lsl #10
  68:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  6c:	5e130109 	mufpls	f0, f3, #1.0
  70:	01000302 	tsteq	r0, r2, lsl #6
  74:	02050001 	andeq	r0, r5, #1
  78:	20000010 	andcs	r0, r0, r0, lsl r0
  7c:	2f012b03 	svccs	0x00012b03
  80:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  84:	2fa03d21 	svccs	0x00a03d21
  88:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  8c:	4ba13d21 	blmi	fe84f518 <ball+0xde84ecac>
  90:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  94:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  98:	002d0304 	eoreq	r0, sp, r4, lsl #6
  9c:	06010402 	streq	r0, [r1], -r2, lsl #8
  a0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
  a4:	003b0602 	eorseq	r0, fp, r2, lsl #12
  a8:	06010402 	streq	r0, [r1], -r2, lsl #8
  ac:	4d4f063c 	stclmi	6, cr0, [pc, #-240]	; ffffffc4 <ball+0xdffff758>
  b0:	0200214c 	andeq	r2, r0, #76, 2
  b4:	003d0304 	eorseq	r0, sp, r4, lsl #6
  b8:	2f030402 	svccs	0x00030402
  bc:	03040200 	movweq	r0, #16896	; 0x4200
  c0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
  c4:	02002f03 	andeq	r2, r0, #3, 30
  c8:	002a0304 	eoreq	r0, sl, r4, lsl #6
  cc:	06010402 	streq	r0, [r1], -r2, lsl #8
  d0:	6049063c 	subvs	r0, r9, ip, lsr r6
  d4:	67596878 			; <UNDEFINED> instruction: 0x67596878
  d8:	68694bc9 	stmdavs	r9!, {r0, r3, r6, r7, r8, r9, fp, lr}^
  dc:	4bbb6759 	blmi	feed9e48 <ball+0xdeed95dc>
  e0:	11036777 	tstne	r3, r7, ror r7
  e4:	206f0374 	rsbcs	r0, pc, r4, ror r3	; <UNPREDICTABLE>
  e8:	034a1103 	movteq	r1, #41219	; 0xa103
  ec:	223d2071 	eorscs	r2, sp, #113	; 0x71
  f0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
  f4:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  f8:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
  fc:	3d30673d 	ldccc	7, cr6, [r0, #-244]!	; 0xffffff0c
 100:	2f3d752f 	svccs	0x003d752f
 104:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
 108:	3d68bc3d 	stclcc	12, cr11, [r8, #-244]!	; 0xffffff0c
 10c:	2f593d3d 	svccs	0x00593d3d
 110:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 114:	313d593d 	teqcc	sp, sp, lsr r9
 118:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 11c:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 120:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 124:	4b303d4b 	blmi	c0f658 <startup-0x1f3f09a8>
 128:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 12c:	3d91763e 	ldccc	6, cr7, [r1, #248]	; 0xf8
 130:	833d3d59 	teqhi	sp, #5696	; 0x1640
 134:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 138:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 13c:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 140:	2f843d2f 	svccs	0x00843d2f
 144:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 148:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 14c:	4b4b4b3d 	blmi	12d2e48 <startup-0x1ed2d1b8>
 150:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 154:	4bad3d3d 	blmi	feb4f650 <ball+0xdeb4ede4>
 158:	03040200 	movweq	r0, #16896	; 0x4200
 15c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 160:	02004903 	andeq	r4, r0, #49152	; 0xc000
 164:	3c060104 	stfccs	f0, [r6], {4}
 168:	02040200 	andeq	r0, r4, #0, 4
 16c:	02003906 	andeq	r3, r0, #98304	; 0x18000
 170:	3c060104 	stfccs	f0, [r6], {4}
 174:	6a4c4306 	bvs	1310d94 <startup-0x1ecef26c>
 178:	01040200 	mrseq	r0, R12_usr
 17c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 180:	004a0204 	subeq	r0, sl, r4, lsl #4
 184:	4a030402 	bmi	c1194 <startup-0x1ff3ee6c>
 188:	08764d06 	ldmdaeq	r6!, {r1, r2, r8, sl, fp, lr}^
 18c:	59595913 	ldmdbpl	r9, {r0, r1, r4, r8, fp, ip, lr}^
 190:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 194:	3d683d5a 	stclcc	13, cr3, [r8, #-360]!	; 0xfffffe98
 198:	3e4b4d4b 	cdpcc	13, 4, cr4, cr11, cr11, {2}
 19c:	bb91c9c9 	bllt	fe4728c8 <ball+0xde47205c>
 1a0:	0392a13d 	orrseq	sl, r2, #1073741839	; 0x4000000f
 1a4:	2403ac5d 	strcs	sl, [r3], #-3165	; 0xfffff3a3
 1a8:	74290320 	strtvc	r0, [r9], #-800	; 0xfffffce0
 1ac:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 1b0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1b4:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1b8:	ab080304 	blge	200dd0 <startup-0x1fdff230>
 1bc:	01040200 	mrseq	r0, R12_usr
 1c0:	3f063c06 	svccc	0x00063c06
 1c4:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 1c8:	003d0304 	eorseq	r0, sp, r4, lsl #6
 1cc:	08030402 	stmdaeq	r3, {r1, sl}
 1d0:	040200ab 	streq	r0, [r2], #-171	; 0xffffff55
 1d4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1d8:	4b4b4c3f 	blmi	12d32dc <startup-0x1ed2cd24>
 1dc:	5a4b7575 	bpl	12dd7b8 <startup-0x1ed22848>
 1e0:	5a4b5a4b 	bpl	12d6b14 <startup-0x1ed294ec>
 1e4:	034b5a4b 	movteq	r5, #47691	; 0xba4b
 1e8:	2f594a0e 	svccs	0x00594a0e
 1ec:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 1f0:	02006801 	andeq	r6, r0, #65536	; 0x10000
 1f4:	00590104 	subseq	r0, r9, r4, lsl #2
 1f8:	3b010402 	blcc	41208 <startup-0x1ffbedf8>
 1fc:	01000302 	tsteq	r0, r2, lsl #6
 200:	Address 0x00000200 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	74730059 	ldrbtvc	r0, [r3], #-89	; 0xffffffa7
   c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  10:	72670070 	rsbvc	r0, r7, #112	; 0x70
  14:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  18:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  1c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  20:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  24:	67007465 	strvs	r7, [r0, -r5, ror #8]
  28:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  2c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  30:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  34:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffec0 <ball+0xdffff654>
  38:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  3c:	6c617600 	stclvs	6, cr7, [r1], #-0
  40:	6d006575 	cfstr32vs	mvfx6, [r0, #-468]	; 0xfffffe2c
  44:	0065766f 	rsbeq	r7, r5, pc, ror #12
  48:	76677261 	strbtvc	r7, [r7], -r1, ror #4
  4c:	2f3a4300 	svccs	0x003a4300
  50:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  54:	5f662f73 	svcpl	0x00662f73
  58:	2f6c6c69 	svccs	0x006c6c69
  5c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
  60:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  64:	6b6f442f 	blvs	1bd1128 <startup-0x1e42eed8>
  68:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  6c:	6f4d2f74 	svcvs	0x004d2f74
  70:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  74:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  78:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  7c:	75612f72 	strbvc	r2, [r1, #-3954]!	; 0xfffff08e
  80:	6f706f74 	svcvs	0x00706f74
  84:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
  88:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  8c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  90:	72696400 	rsbvc	r6, r9, #0, 8
  94:	69700079 	ldmdbvs	r0!, {r0, r3, r4, r5, r6}^
  98:	006c6578 	rsbeq	r6, ip, r8, ror r5
  9c:	70617267 	rsbvc	r7, r1, r7, ror #4
  a0:	5f636968 	svcpl	0x00636968
  a4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  ac:	61700061 	cmnvs	r0, r1, rrx
  b0:	47006567 	strmi	r6, [r0, -r7, ror #10]
  b4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  b8:	37203939 			; <UNDEFINED> instruction: 0x37203939
  bc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  c0:	31303220 	teqcc	r0, r0, lsr #4
  c4:	30393037 	eorscc	r3, r9, r7, lsr r0
  c8:	72282034 	eorvc	r2, r8, #52	; 0x34
  cc:	61656c65 	cmnvs	r5, r5, ror #24
  d0:	20296573 	eorcs	r6, r9, r3, ror r5
  d4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  d8:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  dc:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  e0:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  e4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  e8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  ec:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  f0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  f4:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
  f8:	205d3430 	subscs	r3, sp, r0, lsr r4
  fc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 100:	20626d75 	rsbcs	r6, r2, r5, ror sp
 104:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 108:	613d6863 	teqvs	sp, r3, ror #16
 10c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 110:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 114:	6f6c666d 	svcvs	0x006c666d
 118:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 11c:	733d6962 	teqvc	sp, #1605632	; 0x188000
 120:	2074666f 	rsbscs	r6, r4, pc, ror #12
 124:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 128:	20626d75 	rsbcs	r6, r2, r5, ror sp
 12c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 130:	613d6863 	teqvs	sp, r3, ror #16
 134:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 138:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 13c:	4f2d2067 	svcmi	0x002d2067
 140:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 144:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 148:	64003939 	strvs	r3, [r0], #-2361	; 0xfffff6c7
 14c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 150:	6b696d5f 	blvs	1a5b6d4 <startup-0x1e5a492c>
 154:	74006f72 	strvc	r6, [r0], #-3954	; 0xfffff08e
 158:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 15c:	4f500074 	svcmi	0x00500074
 160:	00544e49 	subseq	r4, r4, r9, asr #28
 164:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 168:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 16c:	61686320 	cmnvs	r8, r0, lsr #6
 170:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
 174:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 178:	00646565 	rsbeq	r6, r4, r5, ror #10
 17c:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 180:	736f7000 	cmnvc	pc, #0
 184:	61620079 	smcvs	8201	; 0x2009
 188:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 18c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 190:	00797274 	rsbseq	r7, r9, r4, ror r2
 194:	70617267 	rsbvc	r7, r1, r7, ror #4
 198:	5f636968 	svcpl	0x00636968
 19c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1a0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 1a4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 1a8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1ac:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffffe4 <ball+0xdffff778>
 1b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1b4:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 1b8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1bc:	695f665c 	ldmdbvs	pc, {r2, r3, r4, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
 1c0:	4f5c6c6c 	svcmi	0x005c6c6c
 1c4:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 1c8:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
 1cc:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 1d0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1d4:	706f4d5c 	rsbvc	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 1d8:	6f62616c 	svcvs	0x0062616c
 1dc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 1e0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 1e4:	7475615c 	ldrbtvc	r6, [r5], #-348	; 0xfffffea4
 1e8:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 1ec:	69640067 	stmdbvs	r4!, {r0, r1, r2, r5, r6}^
 1f0:	67007872 	smlsdxvs	r0, r2, r8, r7
 1f4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1f8:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 1fc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 200:	7a696c61 	bvc	1a5b38c <startup-0x1e5a4c74>
 204:	72670065 	rsbvc	r0, r7, #101	; 0x65
 208:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 20c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 210:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 214:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 218:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 21c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 220:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 224:	615f7469 	cmpvs	pc, r9, ror #8
 228:	75007070 	strvc	r7, [r0, #-112]	; 0xffffff90
 22c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 230:	2064656e 	rsbcs	r6, r4, lr, ror #10
 234:	00746e69 	rsbseq	r6, r4, r9, ror #28
 238:	6f654774 	svcvs	0x00654774
 23c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 240:	69750079 	ldmdbvs	r5!, {r0, r3, r4, r5, r6}^
 244:	5f38746e 	svcpl	0x0038746e
 248:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 24c:	0078657a 	rsbseq	r6, r8, sl, ror r5
 250:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 254:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 258:	5f79616c 	svcpl	0x0079616c
 25c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 260:	72610073 	rsbvc	r0, r1, #115	; 0x73
 264:	62006367 	andvs	r6, r0, #-1677721599	; 0x9c000001
 268:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 26c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 270:	73616d00 	cmnvc	r1, #0, 26
 274:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
 278:	00786564 	rsbseq	r6, r8, r4, ror #10
 27c:	616c6564 	cmnvs	ip, r4, ror #10
 280:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 284:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 288:	70617267 	rsbvc	r7, r1, r7, ror #4
 28c:	5f636968 	svcpl	0x00636968
 290:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 294:	61645f65 	cmnvs	r4, r5, ror #30
 298:	73006174 	movwvc	r6, #372	; 0x174
 29c:	6f5f7465 	svcvs	0x005f7465
 2a0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2a4:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 2a8:	00646565 	rsbeq	r6, r4, r5, ror #10
 2ac:	70617267 	rsbvc	r7, r1, r7, ror #4
 2b0:	5f636968 	svcpl	0x00636968
 2b4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 2b8:	6165725f 	cmnvs	r5, pc, asr r2
 2bc:	67007964 	strvs	r7, [r0, -r4, ror #18]
 2c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2c4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2c8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2cc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2d0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2d4:	61656c63 	cmnvs	r5, r3, ror #24
 2d8:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2dc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2e0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2e4:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff98b <ball+0xdffff11f>
 2e8:	736e3030 	cmnvc	lr, #48	; 0x30
 2ec:	624f7400 	subvs	r7, pc, #0, 8
 2f0:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 2f4:	6f5f7761 	svcvs	0x005f7761
 2f8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2fc:	72670074 	rsbvc	r0, r7, #116	; 0x74
 300:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 304:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 308:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 30c:	6f706d75 	svcvs	0x00706d75
 310:	73746e69 	cmnvc	r4, #1680	; 0x690
 314:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 318:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 31c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 320:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 324:	00786465 	rsbseq	r6, r8, r5, ror #8
 328:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 32c:	50007964 	andpl	r7, r0, r4, ror #18
 330:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 334:	Address 0x00000334 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffeaa2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000048 	andcs	r0, r0, r8, asr #32
  48:	00000038 	andeq	r0, r0, r8, lsr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000080 	andcs	r0, r0, r0, lsl #1
  64:	0000003a 	andeq	r0, r0, sl, lsr r0
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000ba 	strhcs	r0, [r0], -sl
  84:	00000046 	andeq	r0, r0, r6, asr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000100 	andcs	r0, r0, r0, lsl #2
  a4:	00000050 	andeq	r0, r0, r0, asr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	180e4101 	stmdane	lr, {r0, r8, lr}
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000150 	andcs	r0, r0, r0, asr r1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	180e4101 	stmdane	lr, {r0, r8, lr}
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001a0 	andcs	r0, r0, r0, lsr #3
  e4:	00000060 	andeq	r0, r0, r0, rrx
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000200 	andcs	r0, r0, r0, lsl #4
 104:	00000074 	andeq	r0, r0, r4, ror r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000274 	andcs	r0, r0, r4, ror r2
 124:	00000094 	muleq	r0, r4, r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000308 	andcs	r0, r0, r8, lsl #6
 144:	0000007c 	andeq	r0, r0, ip, ror r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000384 	andcs	r0, r0, r4, lsl #7
 164:	00000046 	andeq	r0, r0, r6, asr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	200003ca 	andcs	r0, r0, sl, asr #7
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000410 	andcs	r0, r0, r0, lsl r4
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	2000043a 	andcs	r0, r0, sl, lsr r4
 1c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000454 	andcs	r0, r0, r4, asr r4
 1e0:	0000006e 	andeq	r0, r0, lr, rrx
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	200004c2 	andcs	r0, r0, r2, asr #9
 1fc:	00000058 	andeq	r0, r0, r8, asr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	00000024 	andeq	r0, r0, r4, lsr #32
 214:	00000000 	andeq	r0, r0, r0
 218:	2000051a 	andcs	r0, r0, sl, lsl r5
 21c:	00000192 	muleq	r0, r2, r1
 220:	40100e41 	andsmi	r0, r0, r1, asr #28
 224:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 228:	02874003 	addeq	r4, r7, #3
 22c:	41018e40 	tstmi	r1, r0, asr #28
 230:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200006ac 	andcs	r0, r0, ip, lsr #13
 244:	00000020 	andeq	r0, r0, r0, lsr #32
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	180e4101 	stmdane	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006cc 	andcs	r0, r0, ip, asr #13
 264:	0000005a 	andeq	r0, r0, sl, asr r0
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	180e4101 	stmdane	lr, {r0, r8, lr}
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000726 	andcs	r0, r0, r6, lsr #14
 284:	0000005a 	andeq	r0, r0, sl, asr r0
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	180e4101 	stmdane	lr, {r0, r8, lr}
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	20000780 	andcs	r0, r0, r0, lsl #15
 2a4:	00000084 	andeq	r0, r0, r4, lsl #1
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	100e4101 	andne	r4, lr, r1, lsl #2
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	20000804 	andcs	r0, r0, r4, lsl #16
 2c4:	00000034 	andeq	r0, r0, r4, lsr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
