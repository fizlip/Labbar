
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */ 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9e0 	bl	200003c8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#define B_SELECT 	0x4
#define B_RW 		0x2
#define B_RS 		0x1

// addessera ASCII-display och ettställ de bitar som är 1 i x
void ascii_ctrl_bit_set( unsigned char x ){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLow;
2000001c:	4a0c      	ldr	r2, [pc, #48]	; (20000050 <ascii_ctrl_bit_set+0x40>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x);
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2da      	uxtb	r2, r3
20000032:	0008      	movs	r0, r1
20000034:	187b      	adds	r3, r7, r1
20000036:	2104      	movs	r1, #4
20000038:	430a      	orrs	r2, r1
2000003a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000003c:	4a04      	ldr	r2, [pc, #16]	; (20000050 <ascii_ctrl_bit_set+0x40>)
2000003e:	0001      	movs	r1, r0
20000040:	187b      	adds	r3, r7, r1
20000042:	781b      	ldrb	r3, [r3, #0]
20000044:	7013      	strb	r3, [r2, #0]
}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	46bd      	mov	sp, r7
2000004a:	b004      	add	sp, #16
2000004c:	bd80      	pop	{r7, pc}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	40021014 	andmi	r1, r2, r4, lsl r0

20000054 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear( unsigned char x ){
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	0002      	movs	r2, r0
2000005c:	1dfb      	adds	r3, r7, #7
2000005e:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *portOdrLow;
20000060:	4a0d      	ldr	r2, [pc, #52]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
20000062:	210f      	movs	r1, #15
20000064:	187b      	adds	r3, r7, r1
20000066:	7812      	ldrb	r2, [r2, #0]
20000068:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
2000006a:	1dfb      	adds	r3, r7, #7
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	b25b      	sxtb	r3, r3
20000070:	43db      	mvns	r3, r3
20000072:	b25b      	sxtb	r3, r3
20000074:	187a      	adds	r2, r7, r1
20000076:	7812      	ldrb	r2, [r2, #0]
20000078:	b252      	sxtb	r2, r2
2000007a:	4013      	ands	r3, r2
2000007c:	b25b      	sxtb	r3, r3
2000007e:	2204      	movs	r2, #4
20000080:	4313      	orrs	r3, r2
20000082:	b25a      	sxtb	r2, r3
20000084:	187b      	adds	r3, r7, r1
20000086:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000088:	4a03      	ldr	r2, [pc, #12]	; (20000098 <ascii_ctrl_bit_clear+0x44>)
2000008a:	187b      	adds	r3, r7, r1
2000008c:	781b      	ldrb	r3, [r3, #0]
2000008e:	7013      	strb	r3, [r2, #0]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b004      	add	sp, #16
20000096:	bd80      	pop	{r7, pc}
20000098:	40021014 	andmi	r1, r2, r4, lsl r0

2000009c <ascii_write_controller>:

void ascii_write_controller( unsigned char byte ){
2000009c:	b580      	push	{r7, lr}
2000009e:	b082      	sub	sp, #8
200000a0:	af00      	add	r7, sp, #0
200000a2:	0002      	movs	r2, r0
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	701a      	strb	r2, [r3, #0]
	//Delay 40 ns
	ascii_ctrl_bit_set(B_E);
200000a8:	2040      	movs	r0, #64	; 0x40
200000aa:	f7ff ffb1 	bl	20000010 <ascii_ctrl_bit_set>
	*portOdrHigh = byte;
200000ae:	4a06      	ldr	r2, [pc, #24]	; (200000c8 <ascii_write_controller+0x2c>)
200000b0:	1dfb      	adds	r3, r7, #7
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200000b6:	f000 f88b 	bl	200001d0 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200000ba:	2040      	movs	r0, #64	; 0x40
200000bc:	f7ff ffca 	bl	20000054 <ascii_ctrl_bit_clear>
	//Delay 10 ns
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	b002      	add	sp, #8
200000c6:	bd80      	pop	{r7, pc}
200000c8:	40021015 	andmi	r1, r2, r5, lsl r0

200000cc <ascii_write_cmd>:

void ascii_write_cmd( unsigned char command ){
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
200000d2:	0002      	movs	r2, r0
200000d4:	1dfb      	adds	r3, r7, #7
200000d6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_RS );
200000d8:	2001      	movs	r0, #1
200000da:	f7ff ffbb 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear( B_RW );
200000de:	2002      	movs	r0, #2
200000e0:	f7ff ffb8 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_write_controller( command );
200000e4:	1dfb      	adds	r3, r7, #7
200000e6:	781b      	ldrb	r3, [r3, #0]
200000e8:	0018      	movs	r0, r3
200000ea:	f7ff ffd7 	bl	2000009c <ascii_write_controller>
}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46bd      	mov	sp, r7
200000f2:	b002      	add	sp, #8
200000f4:	bd80      	pop	{r7, pc}

200000f6 <ascii_write_data>:

void ascii_write_data( data ){
200000f6:	b580      	push	{r7, lr}
200000f8:	b082      	sub	sp, #8
200000fa:	af00      	add	r7, sp, #0
200000fc:	6078      	str	r0, [r7, #4]
	ascii_ctrl_bit_set( B_RS );
200000fe:	2001      	movs	r0, #1
20000100:	f7ff ff86 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear( B_RW );
20000104:	2002      	movs	r0, #2
20000106:	f7ff ffa5 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_write_controller( data );
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	b2db      	uxtb	r3, r3
2000010e:	0018      	movs	r0, r3
20000110:	f7ff ffc4 	bl	2000009c <ascii_write_controller>
}
20000114:	46c0      	nop			; (mov r8, r8)
20000116:	46bd      	mov	sp, r7
20000118:	b002      	add	sp, #8
2000011a:	bd80      	pop	{r7, pc}

2000011c <ascii_read_controller>:

unsigned char ascii_read_controller( void ){
2000011c:	b580      	push	{r7, lr}
2000011e:	b082      	sub	sp, #8
20000120:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set( B_E );
20000122:	2040      	movs	r0, #64	; 0x40
20000124:	f7ff ff74 	bl	20000010 <ascii_ctrl_bit_set>
	delay_250ns();
20000128:	f000 f852 	bl	200001d0 <delay_250ns>
	delay_250ns();
2000012c:	f000 f850 	bl	200001d0 <delay_250ns>
	c = *portIdrHigh;
20000130:	4a06      	ldr	r2, [pc, #24]	; (2000014c <ascii_read_controller+0x30>)
20000132:	1dfb      	adds	r3, r7, #7
20000134:	7812      	ldrb	r2, [r2, #0]
20000136:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f7ff ff8b 	bl	20000054 <ascii_ctrl_bit_clear>
	return c;
2000013e:	1dfb      	adds	r3, r7, #7
20000140:	781b      	ldrb	r3, [r3, #0]
}
20000142:	0018      	movs	r0, r3
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40021011 	andmi	r1, r2, r1, lsl r0

20000150 <ascii_read_status>:

unsigned char ascii_read_status( void ){
20000150:	b590      	push	{r4, r7, lr}
20000152:	b083      	sub	sp, #12
20000154:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
20000156:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <ascii_read_status+0x34>)
20000158:	4a0b      	ldr	r2, [pc, #44]	; (20000188 <ascii_read_status+0x38>)
2000015a:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_RS );
2000015c:	2001      	movs	r0, #1
2000015e:	f7ff ff79 	bl	20000054 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set( B_RW );
20000162:	2002      	movs	r0, #2
20000164:	f7ff ff54 	bl	20000010 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000168:	1dfc      	adds	r4, r7, #7
2000016a:	f7ff ffd7 	bl	2000011c <ascii_read_controller>
2000016e:	0003      	movs	r3, r0
20000170:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
20000172:	4b04      	ldr	r3, [pc, #16]	; (20000184 <ascii_read_status+0x34>)
20000174:	4a05      	ldr	r2, [pc, #20]	; (2000018c <ascii_read_status+0x3c>)
20000176:	601a      	str	r2, [r3, #0]
	return rv;
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	781b      	ldrb	r3, [r3, #0]
}
2000017c:	0018      	movs	r0, r3
2000017e:	46bd      	mov	sp, r7
20000180:	b003      	add	sp, #12
20000182:	bd90      	pop	{r4, r7, pc}
20000184:	40021000 	andmi	r1, r2, r0
20000188:	00005555 	andeq	r5, r0, r5, asr r5
2000018c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000190 <ascii_read_data>:

unsigned char ascii_read_data( void ){
20000190:	b590      	push	{r4, r7, lr}
20000192:	b083      	sub	sp, #12
20000194:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
20000196:	4b0b      	ldr	r3, [pc, #44]	; (200001c4 <ascii_read_data+0x34>)
20000198:	4a0b      	ldr	r2, [pc, #44]	; (200001c8 <ascii_read_data+0x38>)
2000019a:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RS );
2000019c:	2001      	movs	r0, #1
2000019e:	f7ff ff37 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set( B_RW );
200001a2:	2002      	movs	r0, #2
200001a4:	f7ff ff34 	bl	20000010 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200001a8:	1dfc      	adds	r4, r7, #7
200001aa:	f7ff ffb7 	bl	2000011c <ascii_read_controller>
200001ae:	0003      	movs	r3, r0
200001b0:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
200001b2:	4b04      	ldr	r3, [pc, #16]	; (200001c4 <ascii_read_data+0x34>)
200001b4:	4a05      	ldr	r2, [pc, #20]	; (200001cc <ascii_read_data+0x3c>)
200001b6:	601a      	str	r2, [r3, #0]
	return rv;
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	781b      	ldrb	r3, [r3, #0]
}
200001bc:	0018      	movs	r0, r3
200001be:	46bd      	mov	sp, r7
200001c0:	b003      	add	sp, #12
200001c2:	bd90      	pop	{r4, r7, pc}
200001c4:	40021000 	andmi	r1, r2, r0
200001c8:	00005555 	andeq	r5, r0, r5, asr r5
200001cc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001d0 <delay_250ns>:

void delay_250ns( void ){
200001d0:	b580      	push	{r7, lr}
200001d2:	af00      	add	r7, sp, #0
	* ( (unsigned long *) 0xE000E010) = 0x0;
200001d4:	4b09      	ldr	r3, [pc, #36]	; (200001fc <delay_250ns+0x2c>)
200001d6:	2200      	movs	r2, #0
200001d8:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E014) = ( (168/4) -1 );
200001da:	4b09      	ldr	r3, [pc, #36]	; (20000200 <delay_250ns+0x30>)
200001dc:	2229      	movs	r2, #41	; 0x29
200001de:	601a      	str	r2, [r3, #0]
	* ( (unsigned long *) 0xE000E018) = 0x0;
200001e0:	4b08      	ldr	r3, [pc, #32]	; (20000204 <delay_250ns+0x34>)
200001e2:	2200      	movs	r2, #0
200001e4:	601a      	str	r2, [r3, #0]
	* ( (unsigned char *) 0xE000E010) = 0x5;
200001e6:	4b05      	ldr	r3, [pc, #20]	; (200001fc <delay_250ns+0x2c>)
200001e8:	2205      	movs	r2, #5
200001ea:	701a      	strb	r2, [r3, #0]
	while(* ( (unsigned char *) 0xE000E010) & 0x10000 == 0){}
200001ec:	46c0      	nop			; (mov r8, r8)
	* ( (unsigned long *) 0xE000E010) = 0x0;
200001ee:	4b03      	ldr	r3, [pc, #12]	; (200001fc <delay_250ns+0x2c>)
200001f0:	2200      	movs	r2, #0
200001f2:	601a      	str	r2, [r3, #0]
}
200001f4:	46c0      	nop			; (mov r8, r8)
200001f6:	46bd      	mov	sp, r7
200001f8:	bd80      	pop	{r7, pc}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	e000e010 	and	lr, r0, r0, lsl r0
20000200:	e000e014 	and	lr, r0, r4, lsl r0
20000204:	e000e018 	and	lr, r0, r8, lsl r0

20000208 <delay_mikro>:

void delay_mikro(unsigned int us){
20000208:	b580      	push	{r7, lr}
2000020a:	b084      	sub	sp, #16
2000020c:	af00      	add	r7, sp, #0
2000020e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < us; i++){
20000210:	2300      	movs	r3, #0
20000212:	60fb      	str	r3, [r7, #12]
20000214:	e00d      	b.n	20000232 <delay_mikro+0x2a>
		for(int j = 0; j < 4; j++){
20000216:	2300      	movs	r3, #0
20000218:	60bb      	str	r3, [r7, #8]
2000021a:	e004      	b.n	20000226 <delay_mikro+0x1e>
			delay_250ns();
2000021c:	f7ff ffd8 	bl	200001d0 <delay_250ns>
		for(int j = 0; j < 4; j++){
20000220:	68bb      	ldr	r3, [r7, #8]
20000222:	3301      	adds	r3, #1
20000224:	60bb      	str	r3, [r7, #8]
20000226:	68bb      	ldr	r3, [r7, #8]
20000228:	2b03      	cmp	r3, #3
2000022a:	ddf7      	ble.n	2000021c <delay_mikro+0x14>
	for(int i = 0; i < us; i++){
2000022c:	68fb      	ldr	r3, [r7, #12]
2000022e:	3301      	adds	r3, #1
20000230:	60fb      	str	r3, [r7, #12]
20000232:	68fb      	ldr	r3, [r7, #12]
20000234:	687a      	ldr	r2, [r7, #4]
20000236:	429a      	cmp	r2, r3
20000238:	d8ed      	bhi.n	20000216 <delay_mikro+0xe>
		}
	}
}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	46bd      	mov	sp, r7
2000023e:	b004      	add	sp, #16
20000240:	bd80      	pop	{r7, pc}

20000242 <delay_milli>:

void delay_milli(unsigned int ms){
20000242:	b580      	push	{r7, lr}
20000244:	b084      	sub	sp, #16
20000246:	af00      	add	r7, sp, #0
20000248:	6078      	str	r0, [r7, #4]
	int i;
	while( ms-- ){
2000024a:	e011      	b.n	20000270 <delay_milli+0x2e>
		for( i = 0; i < 1000; i++){
2000024c:	2300      	movs	r3, #0
2000024e:	60fb      	str	r3, [r7, #12]
20000250:	e00a      	b.n	20000268 <delay_milli+0x26>
			delay_250ns();
20000252:	f7ff ffbd 	bl	200001d0 <delay_250ns>
			delay_250ns();
20000256:	f7ff ffbb 	bl	200001d0 <delay_250ns>
			delay_250ns();
2000025a:	f7ff ffb9 	bl	200001d0 <delay_250ns>
			delay_250ns();
2000025e:	f7ff ffb7 	bl	200001d0 <delay_250ns>
		for( i = 0; i < 1000; i++){
20000262:	68fb      	ldr	r3, [r7, #12]
20000264:	3301      	adds	r3, #1
20000266:	60fb      	str	r3, [r7, #12]
20000268:	68fb      	ldr	r3, [r7, #12]
2000026a:	4a06      	ldr	r2, [pc, #24]	; (20000284 <delay_milli+0x42>)
2000026c:	4293      	cmp	r3, r2
2000026e:	ddf0      	ble.n	20000252 <delay_milli+0x10>
	while( ms-- ){
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	1e5a      	subs	r2, r3, #1
20000274:	607a      	str	r2, [r7, #4]
20000276:	2b00      	cmp	r3, #0
20000278:	d1e8      	bne.n	2000024c <delay_milli+0xa>
		}
	}
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	b004      	add	sp, #16
20000280:	bd80      	pop	{r7, pc}
20000282:	46c0      	nop			; (mov r8, r8)
20000284:	000003e7 	andeq	r0, r0, r7, ror #7

20000288 <ascii_init>:

void ascii_init( void ){
20000288:	b580      	push	{r7, lr}
2000028a:	af00      	add	r7, sp, #0
	//Function set
	while( (ascii_read_status() & 0x80) == 0x80){}
2000028c:	46c0      	nop			; (mov r8, r8)
2000028e:	f7ff ff5f 	bl	20000150 <ascii_read_status>
20000292:	0003      	movs	r3, r0
20000294:	001a      	movs	r2, r3
20000296:	2380      	movs	r3, #128	; 0x80
20000298:	4013      	ands	r3, r2
2000029a:	2b80      	cmp	r3, #128	; 0x80
2000029c:	d0f7      	beq.n	2000028e <ascii_init+0x6>
	delay_mikro( 8 );
2000029e:	2008      	movs	r0, #8
200002a0:	f7ff ffb2 	bl	20000208 <delay_mikro>
	ascii_write_cmd( 0b111000 );
200002a4:	2038      	movs	r0, #56	; 0x38
200002a6:	f7ff ff11 	bl	200000cc <ascii_write_cmd>
	delay_mikro( 39 );
200002aa:	2027      	movs	r0, #39	; 0x27
200002ac:	f7ff ffac 	bl	20000208 <delay_mikro>
	//Display control
	while( (ascii_read_status() & 0x80) == 0x80){}
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	f7ff ff4d 	bl	20000150 <ascii_read_status>
200002b6:	0003      	movs	r3, r0
200002b8:	001a      	movs	r2, r3
200002ba:	2380      	movs	r3, #128	; 0x80
200002bc:	4013      	ands	r3, r2
200002be:	2b80      	cmp	r3, #128	; 0x80
200002c0:	d0f7      	beq.n	200002b2 <ascii_init+0x2a>
	delay_mikro( 8 );
200002c2:	2008      	movs	r0, #8
200002c4:	f7ff ffa0 	bl	20000208 <delay_mikro>
	ascii_write_cmd( 0b1110 );
200002c8:	200e      	movs	r0, #14
200002ca:	f7ff feff 	bl	200000cc <ascii_write_cmd>
	delay_mikro( 39 );
200002ce:	2027      	movs	r0, #39	; 0x27
200002d0:	f7ff ff9a 	bl	20000208 <delay_mikro>
	//Clear Display
	while( (ascii_read_status() & 0x80) == 0x80){}
200002d4:	46c0      	nop			; (mov r8, r8)
200002d6:	f7ff ff3b 	bl	20000150 <ascii_read_status>
200002da:	0003      	movs	r3, r0
200002dc:	001a      	movs	r2, r3
200002de:	2380      	movs	r3, #128	; 0x80
200002e0:	4013      	ands	r3, r2
200002e2:	2b80      	cmp	r3, #128	; 0x80
200002e4:	d0f7      	beq.n	200002d6 <ascii_init+0x4e>
	delay_mikro( 8 );
200002e6:	2008      	movs	r0, #8
200002e8:	f7ff ff8e 	bl	20000208 <delay_mikro>
	ascii_write_cmd( 0b1 );
200002ec:	2001      	movs	r0, #1
200002ee:	f7ff feed 	bl	200000cc <ascii_write_cmd>
	delay_milli( 2 );
200002f2:	2002      	movs	r0, #2
200002f4:	f7ff ffa5 	bl	20000242 <delay_milli>
	//Entry mode set
	while( (ascii_read_status() & 0x80) == 0x80){}
200002f8:	46c0      	nop			; (mov r8, r8)
200002fa:	f7ff ff29 	bl	20000150 <ascii_read_status>
200002fe:	0003      	movs	r3, r0
20000300:	001a      	movs	r2, r3
20000302:	2380      	movs	r3, #128	; 0x80
20000304:	4013      	ands	r3, r2
20000306:	2b80      	cmp	r3, #128	; 0x80
20000308:	d0f7      	beq.n	200002fa <ascii_init+0x72>
	delay_mikro( 8 );
2000030a:	2008      	movs	r0, #8
2000030c:	f7ff ff7c 	bl	20000208 <delay_mikro>
	ascii_write_cmd( 0b110 );
20000310:	2006      	movs	r0, #6
20000312:	f7ff fedb 	bl	200000cc <ascii_write_cmd>
	delay_mikro( 39 );
20000316:	2027      	movs	r0, #39	; 0x27
20000318:	f7ff ff76 	bl	20000208 <delay_mikro>
}
2000031c:	46c0      	nop			; (mov r8, r8)
2000031e:	46bd      	mov	sp, r7
20000320:	bd80      	pop	{r7, pc}

20000322 <ascii_gotoxy>:

void ascii_gotoxy( int x, int y ){
20000322:	b580      	push	{r7, lr}
20000324:	b084      	sub	sp, #16
20000326:	af00      	add	r7, sp, #0
20000328:	6078      	str	r0, [r7, #4]
2000032a:	6039      	str	r1, [r7, #0]
	int address = x-1;
2000032c:	687b      	ldr	r3, [r7, #4]
2000032e:	3b01      	subs	r3, #1
20000330:	60fb      	str	r3, [r7, #12]
	if( y == 2 ){
20000332:	683b      	ldr	r3, [r7, #0]
20000334:	2b02      	cmp	r3, #2
20000336:	d102      	bne.n	2000033e <ascii_gotoxy+0x1c>
		address = address + 0x40;
20000338:	68fb      	ldr	r3, [r7, #12]
2000033a:	3340      	adds	r3, #64	; 0x40
2000033c:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd( 0x80 | address );
2000033e:	68fb      	ldr	r3, [r7, #12]
20000340:	b25b      	sxtb	r3, r3
20000342:	2280      	movs	r2, #128	; 0x80
20000344:	4252      	negs	r2, r2
20000346:	4313      	orrs	r3, r2
20000348:	b25b      	sxtb	r3, r3
2000034a:	b2db      	uxtb	r3, r3
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff febd 	bl	200000cc <ascii_write_cmd>
	delay_mikro( 43 );
20000352:	202b      	movs	r0, #43	; 0x2b
20000354:	f7ff ff58 	bl	20000208 <delay_mikro>
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b004      	add	sp, #16
2000035e:	bd80      	pop	{r7, pc}

20000360 <ascii_write_char>:

void ascii_write_char( unsigned char c ){
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	0002      	movs	r2, r0
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	701a      	strb	r2, [r3, #0]
	while ( (ascii_read_status() & 0x80) == 0x80 ){}
2000036c:	46c0      	nop			; (mov r8, r8)
2000036e:	f7ff feef 	bl	20000150 <ascii_read_status>
20000372:	0003      	movs	r3, r0
20000374:	001a      	movs	r2, r3
20000376:	2380      	movs	r3, #128	; 0x80
20000378:	4013      	ands	r3, r2
2000037a:	2b80      	cmp	r3, #128	; 0x80
2000037c:	d0f7      	beq.n	2000036e <ascii_write_char+0xe>
	delay_mikro( 8 );
2000037e:	2008      	movs	r0, #8
20000380:	f7ff ff42 	bl	20000208 <delay_mikro>
	ascii_write_data( c );
20000384:	1dfb      	adds	r3, r7, #7
20000386:	781b      	ldrb	r3, [r3, #0]
20000388:	0018      	movs	r0, r3
2000038a:	f7ff feb4 	bl	200000f6 <ascii_write_data>
	delay_mikro( 43 );
2000038e:	202b      	movs	r0, #43	; 0x2b
20000390:	f7ff ff3a 	bl	20000208 <delay_mikro>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <init_app>:

void init_app(){
2000039c:	b580      	push	{r7, lr}
2000039e:	af00      	add	r7, sp, #0
	*portModer   = 0x55555555;
200003a0:	4b05      	ldr	r3, [pc, #20]	; (200003b8 <init_app+0x1c>)
200003a2:	4a06      	ldr	r2, [pc, #24]	; (200003bc <init_app+0x20>)
200003a4:	601a      	str	r2, [r3, #0]
	*portOtyper  = 0x0000;
200003a6:	4b06      	ldr	r3, [pc, #24]	; (200003c0 <init_app+0x24>)
200003a8:	2200      	movs	r2, #0
200003aa:	801a      	strh	r2, [r3, #0]
	*portOspeedr = 0x55555555;
200003ac:	4b05      	ldr	r3, [pc, #20]	; (200003c4 <init_app+0x28>)
200003ae:	4a03      	ldr	r2, [pc, #12]	; (200003bc <init_app+0x20>)
200003b0:	601a      	str	r2, [r3, #0]
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	bd80      	pop	{r7, pc}
200003b8:	40021000 	andmi	r1, r2, r0
200003bc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200003c0:	40021004 	andmi	r1, r2, r4
200003c4:	40021008 	andmi	r1, r2, r8

200003c8 <main>:

int main(int argc, char **argv){
200003c8:	b5b0      	push	{r4, r5, r7, lr}
200003ca:	b08e      	sub	sp, #56	; 0x38
200003cc:	af00      	add	r7, sp, #0
200003ce:	6078      	str	r0, [r7, #4]
200003d0:	6039      	str	r1, [r7, #0]
	char *s;
	char test1[] = "     *NYTT SALJ*";
200003d2:	2420      	movs	r4, #32
200003d4:	193b      	adds	r3, r7, r4
200003d6:	4a20      	ldr	r2, [pc, #128]	; (20000458 <main+0x90>)
200003d8:	ca23      	ldmia	r2!, {r0, r1, r5}
200003da:	c323      	stmia	r3!, {r0, r1, r5}
200003dc:	6811      	ldr	r1, [r2, #0]
200003de:	6019      	str	r1, [r3, #0]
200003e0:	7912      	ldrb	r2, [r2, #4]
200003e2:	711a      	strb	r2, [r3, #4]
	char test2[] = "  FILIP ZLATOIDSKY";
200003e4:	230c      	movs	r3, #12
200003e6:	18fb      	adds	r3, r7, r3
200003e8:	4a1c      	ldr	r2, [pc, #112]	; (2000045c <main+0x94>)
200003ea:	ca23      	ldmia	r2!, {r0, r1, r5}
200003ec:	c323      	stmia	r3!, {r0, r1, r5}
200003ee:	6811      	ldr	r1, [r2, #0]
200003f0:	6019      	str	r1, [r3, #0]
200003f2:	8891      	ldrh	r1, [r2, #4]
200003f4:	8099      	strh	r1, [r3, #4]
200003f6:	7992      	ldrb	r2, [r2, #6]
200003f8:	719a      	strb	r2, [r3, #6]
	
	init_app();
200003fa:	f7ff ffcf 	bl	2000039c <init_app>
	ascii_init();
200003fe:	f7ff ff43 	bl	20000288 <ascii_init>
	ascii_gotoxy(1,1);
20000402:	2101      	movs	r1, #1
20000404:	2001      	movs	r0, #1
20000406:	f7ff ff8c 	bl	20000322 <ascii_gotoxy>
	s = test1;
2000040a:	193b      	adds	r3, r7, r4
2000040c:	637b      	str	r3, [r7, #52]	; 0x34
	while( *s )
2000040e:	e006      	b.n	2000041e <main+0x56>
		ascii_write_char( *s++ );
20000410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000412:	1c5a      	adds	r2, r3, #1
20000414:	637a      	str	r2, [r7, #52]	; 0x34
20000416:	781b      	ldrb	r3, [r3, #0]
20000418:	0018      	movs	r0, r3
2000041a:	f7ff ffa1 	bl	20000360 <ascii_write_char>
	while( *s )
2000041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000420:	781b      	ldrb	r3, [r3, #0]
20000422:	2b00      	cmp	r3, #0
20000424:	d1f4      	bne.n	20000410 <main+0x48>
	ascii_gotoxy(1,2);
20000426:	2102      	movs	r1, #2
20000428:	2001      	movs	r0, #1
2000042a:	f7ff ff7a 	bl	20000322 <ascii_gotoxy>
	s = test2;
2000042e:	230c      	movs	r3, #12
20000430:	18fb      	adds	r3, r7, r3
20000432:	637b      	str	r3, [r7, #52]	; 0x34
	while( *s )
20000434:	e006      	b.n	20000444 <main+0x7c>
		ascii_write_char( *s++ );
20000436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000438:	1c5a      	adds	r2, r3, #1
2000043a:	637a      	str	r2, [r7, #52]	; 0x34
2000043c:	781b      	ldrb	r3, [r3, #0]
2000043e:	0018      	movs	r0, r3
20000440:	f7ff ff8e 	bl	20000360 <ascii_write_char>
	while( *s )
20000444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	2b00      	cmp	r3, #0
2000044a:	d1f4      	bne.n	20000436 <main+0x6e>
	return 0;
2000044c:	2300      	movs	r3, #0
}
2000044e:	0018      	movs	r0, r3
20000450:	46bd      	mov	sp, r7
20000452:	b00e      	add	sp, #56	; 0x38
20000454:	bdb0      	pop	{r4, r5, r7, pc}
20000456:	46c0      	nop			; (mov r8, r8)
20000458:	20000460 	andcs	r0, r0, r0, ror #8
2000045c:	20000474 	andcs	r0, r0, r4, ror r4
20000460:	20202020 	eorcs	r2, r0, r0, lsr #32
20000464:	594e2a20 	stmdbpl	lr, {r5, r9, fp, sp}^
20000468:	53205454 			; <UNDEFINED> instruction: 0x53205454
2000046c:	2a4a4c41 	bcs	21293578 <main+0x12931b0>
20000470:	00000000 	andeq	r0, r0, r0
20000474:	49462020 	stmdbmi	r6, {r5, sp}^
20000478:	2050494c 	subscs	r4, r0, ip, asr #18
2000047c:	54414c5a 	strbpl	r4, [r1], #-3162	; 0xfffff3a6
20000480:	5344494f 	movtpl	r4, #18767	; 0x494f
20000484:	0000594b 	andeq	r5, r0, fp, asr #18

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000340 	andeq	r0, r0, r0, asr #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000000c 	andeq	r0, r0, ip
  10:	00020c0c 	andeq	r0, r2, ip, lsl #24
  14:	0001bb00 	andeq	fp, r1, r0, lsl #22
	...
  24:	01650200 	cmneq	r5, r0, lsl #4
  28:	aa010000 	bge	40030 <startup-0x1ffbffd0>
  2c:	00000085 	andeq	r0, r0, r5, lsl #1
  30:	200003c8 	andcs	r0, r0, r8, asr #7
  34:	00000098 	muleq	r0, r8, r0
  38:	00859c01 	addeq	r9, r5, r1, lsl #24
  3c:	8a030000 	bhi	c0044 <startup-0x1ff3ffbc>
  40:	01000001 	tsteq	r0, r1
  44:	000085aa 	andeq	r8, r0, sl, lsr #11
  48:	bc910300 	ldclt	3, cr0, [r1], {0}
  4c:	0180037f 	orreq	r0, r0, pc, ror r3
  50:	aa010000 	bge	40058 <startup-0x1ffbffa8>
  54:	0000008c 	andeq	r0, r0, ip, lsl #1
  58:	7fb89103 	svcvc	0x00b89103
  5c:	01007304 	tsteq	r0, r4, lsl #6
  60:	000092ab 	andeq	r9, r0, fp, lsr #5
  64:	6c910200 	lfmvs	f0, 4, [r1], {0}
  68:	00018f05 	andeq	r8, r1, r5, lsl #30
  6c:	9fac0100 	svcls	0x00ac0100
  70:	02000000 	andeq	r0, r0, #0
  74:	95055891 	strls	r5, [r5, #-2193]	; 0xfffff76f
  78:	01000001 	tsteq	r0, r1
  7c:	0000b6ad 	andeq	fp, r0, sp, lsr #13
  80:	44910200 	ldrmi	r0, [r1], #512	; 0x200
  84:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
  88:	00746e69 	rsbseq	r6, r4, r9, ror #28
  8c:	00920407 	addseq	r0, r2, r7, lsl #8
  90:	04070000 	streq	r0, [r7], #-0
  94:	00000098 	muleq	r0, r8, r0
  98:	60080108 	andvs	r0, r8, r8, lsl #2
  9c:	09000001 	stmdbeq	r0, {r0}
  a0:	00000098 	muleq	r0, r8, r0
  a4:	000000af 	andeq	r0, r0, pc, lsr #1
  a8:	0000af0a 	andeq	sl, r0, sl, lsl #30
  ac:	08001000 	stmdaeq	r0, {ip}
  b0:	00a40704 	adceq	r0, r4, r4, lsl #14
  b4:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
  b8:	c6000000 	strgt	r0, [r0], -r0
  bc:	0a000000 	beq	c4 <startup-0x1fffff3c>
  c0:	000000af 	andeq	r0, r0, pc, lsr #1
  c4:	770b0012 	smladvc	fp, r2, r0, r0
  c8:	01000001 	tsteq	r0, r1
  cc:	00039ca4 	andeq	r9, r3, r4, lsr #25
  d0:	00002c20 	andeq	r2, r0, r0, lsr #24
  d4:	0c9c0100 	ldfeqs	f0, [ip], {0}
  d8:	000000e9 	andeq	r0, r0, r9, ror #1
  dc:	03609d01 	cmneq	r0, #1, 26	; 0x40
  e0:	003c2000 	eorseq	r2, ip, r0
  e4:	9c010000 	stcls	0, cr0, [r1], {-0}
  e8:	000000f9 	strdeq	r0, [r0], -r9
  ec:	0100630d 	tsteq	r0, sp, lsl #6
  f0:	0000f99d 	muleq	r0, sp, r9
  f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  f8:	08010800 	stmdaeq	r1, {fp}
  fc:	00000157 	andeq	r0, r0, r7, asr r1
 100:	00016a0c 	andeq	r6, r1, ip, lsl #20
 104:	22940100 	addscs	r0, r4, #0, 2
 108:	3e200003 	cdpcc	0, 2, cr0, cr0, cr3, {0}
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	00013c9c 	muleq	r1, ip, ip
 114:	00780d00 	rsbseq	r0, r8, r0, lsl #26
 118:	00859401 	addeq	r9, r5, r1, lsl #8
 11c:	91020000 	mrsls	r0, (UNDEF: 2)
 120:	00790d6c 	rsbseq	r0, r9, ip, ror #26
 124:	00859401 	addeq	r9, r5, r1, lsl #8
 128:	91020000 	mrsls	r0, (UNDEF: 2)
 12c:	01290568 			; <UNDEFINED> instruction: 0x01290568
 130:	95010000 	strls	r0, [r1, #-0]
 134:	00000085 	andeq	r0, r0, r5, lsl #1
 138:	00749102 	rsbseq	r9, r4, r2, lsl #2
 13c:	0002540e 	andeq	r5, r2, lr, lsl #8
 140:	887d0100 	ldmdahi	sp!, {r8}^
 144:	9a200002 	bls	800154 <startup-0x1f7ffeac>
 148:	01000000 	mrseq	r0, (UNDEF: 0)
 14c:	00000c9c 	muleq	r0, ip, ip
 150:	71010000 	mrsvc	r0, (UNDEF: 1)
 154:	20000242 	andcs	r0, r0, r2, asr #4
 158:	00000046 	andeq	r0, r0, r6, asr #32
 15c:	017c9c01 	cmneq	ip, r1, lsl #24
 160:	6d0d0000 	stcvs	0, cr0, [sp, #-0]
 164:	71010073 	tstvc	r1, r3, ror r0
 168:	000000af 	andeq	r0, r0, pc, lsr #1
 16c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
 170:	72010069 	andvc	r0, r1, #105	; 0x69
 174:	00000085 	andeq	r0, r0, r5, lsl #1
 178:	00749102 	rsbseq	r9, r4, r2, lsl #2
 17c:	0000c60c 	andeq	ip, r0, ip, lsl #12
 180:	08690100 	stmdaeq	r9!, {r8}^
 184:	3a200002 	bcc	800194 <startup-0x1f7ffe6c>
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	0001cb9c 	muleq	r1, ip, fp
 190:	73750d00 	cmnvc	r5, #0, 26
 194:	af690100 	svcge	0x00690100
 198:	02000000 	andeq	r0, r0, #0
 19c:	100f6c91 	mulne	pc, r1, ip	; <UNPREDICTABLE>
 1a0:	2a200002 	bcs	8001b0 <startup-0x1f7ffe50>
 1a4:	04000000 	streq	r0, [r0], #-0
 1a8:	6a010069 	bvs	40354 <startup-0x1ffbfcac>
 1ac:	00000085 	andeq	r0, r0, r5, lsl #1
 1b0:	0f749102 	svceq	0x00749102
 1b4:	20000216 	andcs	r0, r0, r6, lsl r2
 1b8:	00000016 	andeq	r0, r0, r6, lsl r0
 1bc:	01006a04 	tsteq	r0, r4, lsl #20
 1c0:	0000856b 	andeq	r8, r0, fp, ror #10
 1c4:	70910200 	addsvc	r0, r1, r0, lsl #4
 1c8:	10000000 	andne	r0, r0, r0
 1cc:	0000011d 	andeq	r0, r0, sp, lsl r1
 1d0:	01d06001 	bicseq	r6, r0, r1
 1d4:	00382000 	eorseq	r2, r8, r0
 1d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1dc:	00014702 	andeq	r4, r1, r2, lsl #14
 1e0:	f9570100 			; <UNDEFINED> instruction: 0xf9570100
 1e4:	90000000 	andls	r0, r0, r0
 1e8:	40200001 	eormi	r0, r0, r1
 1ec:	01000000 	mrseq	r0, (UNDEF: 0)
 1f0:	0002039c 	muleq	r2, ip, r3
 1f4:	76720400 	ldrbtvc	r0, [r2], -r0, lsl #8
 1f8:	f95b0100 			; <UNDEFINED> instruction: 0xf95b0100
 1fc:	02000000 	andeq	r0, r0, #0
 200:	02006f91 	andeq	r6, r0, #580	; 0x244
 204:	000000fa 	strdeq	r0, [r0], -sl
 208:	00f94e01 	rscseq	r4, r9, r1, lsl #28
 20c:	01500000 	cmpeq	r0, r0
 210:	00402000 	subeq	r2, r0, r0
 214:	9c010000 	stcls	0, cr0, [r1], {-0}
 218:	0000022a 	andeq	r0, r0, sl, lsr #4
 21c:	00767204 	rsbseq	r7, r6, r4, lsl #4
 220:	00f95201 	rscseq	r5, r9, r1, lsl #4
 224:	91020000 	mrsls	r0, (UNDEF: 2)
 228:	3102006f 	tstcc	r2, pc, rrx
 22c:	01000001 	tsteq	r0, r1
 230:	0000f944 	andeq	pc, r0, r4, asr #18
 234:	00011c00 	andeq	r1, r1, r0, lsl #24
 238:	00003420 	andeq	r3, r0, r0, lsr #8
 23c:	5d9c0100 	ldfpls	f0, [ip]
 240:	04000002 	streq	r0, [r0], #-2
 244:	45010063 	strmi	r0, [r1, #-99]	; 0xffffff9d
 248:	000000f9 	strdeq	r0, [r0], -r9
 24c:	11779102 	cmnne	r7, r2, lsl #2
 250:	0000011d 	andeq	r0, r0, sp, lsl r1
 254:	00853301 	addeq	r3, r5, r1, lsl #6
 258:	00120000 	andseq	r0, r2, r0
 25c:	010c1300 	mrseq	r1, LR_mon
 260:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 264:	200000f6 	strdcs	r0, [r0], -r6
 268:	00000026 	andeq	r0, r0, r6, lsr #32
 26c:	02819c01 	addeq	r9, r1, #256	; 0x100
 270:	52030000 	andpl	r0, r3, #0
 274:	01000001 	tsteq	r0, r1
 278:	0000853e 	andeq	r8, r0, lr, lsr r5
 27c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 280:	01a30c00 			; <UNDEFINED> instruction: 0x01a30c00
 284:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 288:	200000cc 	andcs	r0, r0, ip, asr #1
 28c:	0000002a 	andeq	r0, r0, sl, lsr #32
 290:	02a59c01 	adceq	r9, r5, #256	; 0x100
 294:	b3030000 	movwlt	r0, #12288	; 0x3000
 298:	01000001 	tsteq	r0, r1
 29c:	0000f938 	andeq	pc, r0, r8, lsr r9	; <UNPREDICTABLE>
 2a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2a4:	00d20c00 	sbcseq	r0, r2, r0, lsl #24
 2a8:	2f010000 	svccs	0x00010000
 2ac:	2000009c 	mulcs	r0, ip, r0
 2b0:	00000030 	andeq	r0, r0, r0, lsr r0
 2b4:	02d69c01 	sbcseq	r9, r6, #256	; 0x100
 2b8:	85030000 	strhi	r0, [r3, #-0]
 2bc:	01000001 	tsteq	r0, r1
 2c0:	0000f92f 	andeq	pc, r0, pc, lsr #18
 2c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2c8:	00011d11 	andeq	r1, r1, r1, lsl sp
 2cc:	85330100 	ldrhi	r0, [r3, #-256]!	; 0xffffff00
 2d0:	12000000 	andne	r0, r0, #0
 2d4:	b1140000 	tstlt	r4, r0
 2d8:	01000000 	mrseq	r0, (UNDEF: 0)
 2dc:	00005428 	andeq	r5, r0, r8, lsr #8
 2e0:	00004820 	andeq	r4, r0, r0, lsr #16
 2e4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 2e8:	0d000003 	stceq	0, cr0, [r0, #-12]
 2ec:	28010078 	stmdacs	r1, {r3, r4, r5, r6}
 2f0:	000000f9 	strdeq	r0, [r0], -r9
 2f4:	046f9102 	strbteq	r9, [pc], #-258	; 2fc <startup-0x1ffffd04>
 2f8:	29010063 	stmdbcs	r1, {r0, r1, r5, r6}
 2fc:	000000f9 	strdeq	r0, [r0], -r9
 300:	00779102 	rsbseq	r9, r7, r2, lsl #2
 304:	0001f914 	andeq	pc, r1, r4, lsl r9	; <UNPREDICTABLE>
 308:	10210100 	eorne	r0, r1, r0, lsl #2
 30c:	44200000 	strtmi	r0, [r0], #-0
 310:	01000000 	mrseq	r0, (UNDEF: 0)
 314:	0003329c 	muleq	r3, ip, r2
 318:	00780d00 	rsbseq	r0, r8, r0, lsl #26
 31c:	00f92101 	rscseq	r2, r9, r1, lsl #2
 320:	91020000 	mrsls	r0, (UNDEF: 2)
 324:	0063046f 	rsbeq	r0, r3, pc, ror #8
 328:	00f92201 	rscseq	r2, r9, r1, lsl #4
 32c:	91020000 	mrsls	r0, (UNDEF: 2)
 330:	9b100077 	blls	400514 <startup-0x1fbffaec>
 334:	01000001 	tsteq	r0, r1
 338:	00000007 	andeq	r0, r0, r7
 33c:	00000c20 	andeq	r0, r0, r0, lsr #24
 340:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	01111349 	tsteq	r1, r9, asr #6
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	01194296 			; <UNDEFINED> instruction: 0x01194296
  2c:	03000013 	movweq	r0, #19
  30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  3c:	34040000 	strcc	r0, [r4], #-0
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	00180213 	andseq	r0, r8, r3, lsl r2
  4c:	00340500 	eorseq	r0, r4, r0, lsl #10
  50:	0b3a0e03 	bleq	e83864 <startup-0x1f17c79c>
  54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	0b002406 	bleq	907c <startup-0x1fff6f84>
  60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  64:	07000008 	streq	r0, [r0, -r8]
  68:	0b0b000f 	bleq	2c00ac <startup-0x1fd3ff54>
  6c:	00001349 	andeq	r1, r0, r9, asr #6
  70:	0b002408 	bleq	9098 <startup-0x1fff6f68>
  74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  78:	0900000e 	stmdbeq	r0, {r1, r2, r3}
  7c:	13490101 	movtne	r0, #37121	; 0x9101
  80:	00001301 	andeq	r1, r0, r1, lsl #6
  84:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  88:	000b2f13 	andeq	r2, fp, r3, lsl pc
  8c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
  90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  94:	0b3b0b3a 	bleq	ec2d84 <startup-0x1f13d27c>
  98:	06120111 			; <UNDEFINED> instruction: 0x06120111
  9c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  a0:	0c000019 	stceq	0, cr0, [r0], {25}
  a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a8:	0b3a0e03 	bleq	e838bc <startup-0x1f17c744>
  ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b8:	00130119 	andseq	r0, r3, r9, lsl r1
  bc:	00050d00 	andeq	r0, r5, r0, lsl #26
  c0:	0b3a0803 	bleq	e820d4 <startup-0x1f17df2c>
  c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  c8:	00001802 	andeq	r1, r0, r2, lsl #16
  cc:	3f002e0e 	svccc	0x00002e0e
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  dc:	96184006 	ldrls	r4, [r8], -r6
  e0:	00001942 	andeq	r1, r0, r2, asr #18
  e4:	11010b0f 	tstne	r1, pc, lsl #22
  e8:	00061201 	andeq	r1, r6, r1, lsl #4
  ec:	002e1000 	eoreq	r1, lr, r0
  f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	01111927 	tsteq	r1, r7, lsr #18
  fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 100:	00194297 	mulseq	r9, r7, r2
 104:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
 110:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 114:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
 118:	13000000 	movwne	r0, #0
 11c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 120:	0b3a0e03 	bleq	e83934 <startup-0x1f17c6cc>
 124:	01110b3b 	tsteq	r1, fp, lsr fp
 128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 12c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 130:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 148:	00130119 	andseq	r0, r3, r9, lsl r1
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000450 	andeq	r0, r0, r0, asr r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000460 	andcs	r0, r0, r0, ror #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000159 	andeq	r0, r0, r9, asr r1
   4:	005e0002 	subseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c695f66 	stclvs	15, cr5, [r9], #-408	; 0xfffffe68
  28:	6e4f2f6c 	cdpvs	15, 4, cr2, cr15, cr12, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	442f6576 	strtmi	r6, [pc], #-1398	; 38 <startup-0x1fffffc8>
  34:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
  38:	2f746e65 	svccs	0x00746e65
  3c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  40:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  44:	6f697461 	svcvs	0x00697461
  48:	2f72656e 	svccs	0x0072656e
  4c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  50:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
  54:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  58:	74730000 	ldrbtvc	r0, [r3], #-0
  5c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  60:	00632e70 	rsbeq	r2, r3, r0, ror lr
  64:	00000001 	andeq	r0, r0, r1
  68:	00020500 	andeq	r0, r2, r0, lsl #10
  6c:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
  70:	03025e13 	movweq	r5, #11795	; 0x2e13
  74:	00010100 	andeq	r0, r1, r0, lsl #2
  78:	00100205 	andseq	r0, r0, r5, lsl #4
  7c:	20032000 	andcs	r2, r3, r0
  80:	ad596801 	ldclge	8, cr6, [r9, #-4]
  84:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
  88:	68684be5 	stmdavs	r8!, {r0, r2, r5, r6, r7, r8, r9, fp, lr}^
  8c:	3e2f4b3d 	vmovcc.16	d15[2], r4
  90:	3d3d6768 	ldccc	7, cr6, [sp, #-416]!	; 0xfffffe60
  94:	3d4b4c59 	stclcc	12, cr4, [fp, #-356]	; 0xfffffe9c
  98:	3e4c593d 			; <UNDEFINED> instruction: 0x3e4c593d
  9c:	4b2f2f3d 	blmi	bcbd98 <startup-0x1f434268>
  a0:	3d762f3d 	ldclcc	15, cr2, [r6, #-244]!	; 0xffffff0c
  a4:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  a8:	3da02f3d 	stccc	15, cr2, [r0, #244]!	; 0xf4
  ac:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  b0:	2fa02f3d 	svccs	0x00a02f3d
  b4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  b8:	4ba03d21 	blmi	fe80f544 <main+0xde80f17c>
  bc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  c0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  c4:	002d0304 	eoreq	r0, sp, r4, lsl #6
  c8:	06010402 	streq	r0, [r1], -r2, lsl #8
  cc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
  d0:	003b0602 	eorseq	r0, fp, r2, lsl #12
  d4:	06010402 	streq	r0, [r1], -r2, lsl #8
  d8:	4c4f063c 	mcrrmi	6, 3, r0, pc, cr12
  dc:	0200214c 	andeq	r2, r0, #76, 2
  e0:	003d0304 	eorseq	r0, sp, r4, lsl #6
  e4:	2f030402 	svccs	0x00030402
  e8:	03040200 	movweq	r0, #16896	; 0x4200
  ec:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
  f0:	02002f03 	andeq	r2, r0, #3, 30
  f4:	002a0304 	eoreq	r0, sl, r4, lsl #6
  f8:	06010402 	streq	r0, [r1], -r2, lsl #8
  fc:	6049063c 	subvs	r0, r9, ip, lsr r6
 100:	02003076 	andeq	r3, r0, #118	; 0x76
 104:	20060104 	andcs	r0, r6, r4, lsl #2
 108:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 10c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 110:	06200601 	strteq	r0, [r0], -r1, lsl #12
 114:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
 118:	01040200 	mrseq	r0, R12_usr
 11c:	83062006 	movwhi	r2, #24582	; 0x6006
 120:	003e3d3d 	eorseq	r3, lr, sp, lsr sp
 124:	06010402 	streq	r0, [r1], -r2, lsl #8
 128:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 12c:	593e3d3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 130:	9f3e3d3d 	svcls	0x003e3d3d
 134:	00674c3d 	rsbeq	r4, r7, sp, lsr ip
 138:	06010402 	streq	r0, [r1], -r2, lsl #8
 13c:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 140:	2f4c3d59 	svccs	0x004c3d59
 144:	ae3d3d3d 	mrcge	13, 1, r3, cr13, cr13, {1}
 148:	2fae915a 	svccs	0x00ae915a
 14c:	212f4b2f 			; <UNDEFINED> instruction: 0x212f4b2f
 150:	3d4b4c73 	stclcc	12, cr4, [fp, #-460]	; 0xfffffe34
 154:	214c7321 	cmpcs	ip, r1, lsr #6
 158:	01000902 	tsteq	r0, r2, lsl #18
 15c:	Address 0x0000015c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  b0:	63736100 	cmnvs	r3, #0, 2
  b4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  b8:	5f6c7274 	svcpl	0x006c7274
  bc:	5f746962 	svcpl	0x00746962
  c0:	61656c63 	cmnvs	r5, r3, ror #24
  c4:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  c8:	5f79616c 	svcpl	0x0079616c
  cc:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  d0:	7361006f 	cmnvc	r1, #111	; 0x6f
  d4:	5f696963 	svcpl	0x00696963
  d8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  dc:	6f635f65 	svcvs	0x00635f65
  e0:	6f72746e 	svcvs	0x0072746e
  e4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  e8:	63736100 	cmnvs	r3, #0, 2
  ec:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f4:	6168635f 	cmnvs	r8, pc, asr r3
  f8:	73610072 	cmnvc	r1, #114	; 0x72
  fc:	5f696963 	svcpl	0x00696963
 100:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 104:	6174735f 	cmnvs	r4, pc, asr r3
 108:	00737574 	rsbseq	r7, r3, r4, ror r5
 10c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 110:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 114:	5f657469 	svcpl	0x00657469
 118:	61746164 	cmnvs	r4, r4, ror #2
 11c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 120:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 124:	736e3035 	cmnvc	lr, #53	; 0x35
 128:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 12c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 130:	63736100 	cmnvs	r3, #0, 2
 134:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 138:	5f646165 	svcpl	0x00646165
 13c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 140:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 144:	61007265 	tstvs	r0, r5, ror #4
 148:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 14c:	6165725f 	cmnvs	r5, pc, asr r2
 150:	61645f64 	cmnvs	r4, r4, ror #30
 154:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
 158:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 15c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 160:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 164:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 168:	7361006e 	cmnvc	r1, #110	; 0x6e
 16c:	5f696963 	svcpl	0x00696963
 170:	6f746f67 	svcvs	0x00746f67
 174:	69007978 	stmdbvs	r0, {r3, r4, r5, r6, r8, fp, ip, sp, lr}
 178:	5f74696e 	svcpl	0x0074696e
 17c:	00707061 	rsbseq	r7, r0, r1, rrx
 180:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 184:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 188:	72610065 	rsbvc	r0, r1, #101	; 0x65
 18c:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 190:	31747365 	cmncc	r4, r5, ror #6
 194:	73657400 	cmnvc	r5, #0, 8
 198:	73003274 	movwvc	r3, #628	; 0x274
 19c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1a0:	61007075 	tstvs	r0, r5, ror r0
 1a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1a8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1ac:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1b0:	6300646d 	movwvs	r6, #1133	; 0x46d
 1b4:	616d6d6f 	cmnvs	sp, pc, ror #26
 1b8:	4300646e 	movwmi	r6, #1134	; 0x46e
 1bc:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
 1c0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 1c4:	6c695f66 	stclvs	15, cr5, [r9], #-408	; 0xfffffe68
 1c8:	6e4f5c6c 	cdpvs	12, 4, cr5, cr15, cr12, {3}
 1cc:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 1d0:	445c6576 	ldrbmi	r6, [ip], #-1398	; 0xfffffa8a
 1d4:	6d756b6f 	fldmdbxvs	r5!, {d22-d76}	;@ Deprecated
 1d8:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
 1dc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 1e0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 1e4:	6f697461 	svcvs	0x00697461
 1e8:	5c72656e 	cfldr64pl	mvdx6, [r2], #-440	; 0xfffffe48
 1ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1f0:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
 1f4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1f8:	63736100 	cmnvs	r3, #0, 2
 1fc:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 200:	5f6c7274 	svcpl	0x006c7274
 204:	5f746962 	svcpl	0x00746962
 208:	00746573 	rsbseq	r6, r4, r3, ror r5
 20c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7d1 <main+0xdffff409>
 210:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 214:	695f662f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r9, sl, sp, lr}^	; <UNPREDICTABLE>
 218:	4f2f6c6c 	svcmi	0x002f6c6c
 21c:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 220:	2f657669 	svccs	0x00657669
 224:	756b6f44 	strbvc	r6, [fp, #-3908]!	; 0xfffff0bc
 228:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 22c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 230:	6f62616c 	svcvs	0x0062616c
 234:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 238:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 23c:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 240:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 244:	616c7073 	smcvs	50947	; 0xc703
 248:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 24c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 250:	00632e70 	rsbeq	r2, r3, r0, ror lr
 254:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 258:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 25c:	Address 0x0000025c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <main+0xdfffef46>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000054 	andcs	r0, r0, r4, asr r0
  4c:	00000048 	andeq	r0, r0, r8, asr #32
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	180e4101 	stmdane	lr, {r0, r8, lr}
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	2000009c 	mulcs	r0, ip, r0
  6c:	00000030 	andeq	r0, r0, r0, lsr r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000cc 	andcs	r0, r0, ip, asr #1
  8c:	0000002a 	andeq	r0, r0, sl, lsr #32
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200000f6 	strdcs	r0, [r0], -r6
  ac:	00000026 	andeq	r0, r0, r6, lsr #32
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	100e4101 	andne	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	2000011c 	andcs	r0, r0, ip, lsl r1
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	100e4101 	andne	r4, lr, r1, lsl #2
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	00000020 	andeq	r0, r0, r0, lsr #32
  e4:	00000000 	andeq	r0, r0, r0
  e8:	20000150 	andcs	r0, r0, r0, asr r1
  ec:	00000040 	andeq	r0, r0, r0, asr #32
  f0:	400c0e41 	andmi	r0, ip, r1, asr #28
  f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  f8:	018e4002 	orreq	r4, lr, r2
  fc:	41180e41 	tstmi	r8, r1, asr #28
 100:	0000070d 	andeq	r0, r0, sp, lsl #14
 104:	00000020 	andeq	r0, r0, r0, lsr #32
 108:	00000000 	andeq	r0, r0, r0
 10c:	20000190 	mulcs	r0, r0, r1
 110:	00000040 	andeq	r0, r0, r0, asr #32
 114:	400c0e41 	andmi	r0, ip, r1, asr #28
 118:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 11c:	018e4002 	orreq	r4, lr, r2
 120:	41180e41 	tstmi	r8, r1, asr #28
 124:	0000070d 	andeq	r0, r0, sp, lsl #14
 128:	00000018 	andeq	r0, r0, r8, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 134:	00000038 	andeq	r0, r0, r8, lsr r0
 138:	40080e41 	andmi	r0, r8, r1, asr #28
 13c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 140:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	20000208 	andcs	r0, r0, r8, lsl #4
 150:	0000003a 	andeq	r0, r0, sl, lsr r0
 154:	40080e41 	andmi	r0, r8, r1, asr #28
 158:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 15c:	180e4101 	stmdane	lr, {r0, r8, lr}
 160:	00070d41 	andeq	r0, r7, r1, asr #26
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	20000242 	andcs	r0, r0, r2, asr #4
 170:	00000046 	andeq	r0, r0, r6, asr #32
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	180e4101 	stmdane	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000018 	andeq	r0, r0, r8, lsl r0
 188:	00000000 	andeq	r0, r0, r0
 18c:	20000288 	andcs	r0, r0, r8, lsl #5
 190:	0000009a 	muleq	r0, sl, r0
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000322 	andcs	r0, r0, r2, lsr #6
 1ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	20000360 	andcs	r0, r0, r0, ror #6
 1cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	100e4101 	andne	r4, lr, r1, lsl #2
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	2000039c 	mulcs	r0, ip, r3
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
 200:	00000000 	andeq	r0, r0, r0
 204:	200003c8 	andcs	r0, r0, r8, asr #7
 208:	00000098 	muleq	r0, r8, r0
 20c:	40100e41 	andsmi	r0, r0, r1, asr #28
 210:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 214:	02874003 	addeq	r4, r7, #3
 218:	41018e40 	tstmi	r1, r0, asr #28
 21c:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
 220:	00000007 	andeq	r0, r0, r7
